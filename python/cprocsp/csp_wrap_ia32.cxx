/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN Py_hash_t
SwigPyObject_hash(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  void *ptr = sobj->ptr;
  return (Py_hash_t)ptr;
}

SWIGINTERN Py_hash_t
SWIG_PyNumber_AsPyHash(PyObject *obj) {
  Py_hash_t result = -1;
#if PY_VERSION_HEX < 0x03020000
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj))
    result = PyInt_AsLong(obj);
  else
#endif
  if (PyLong_Check(obj))
    result = PyLong_AsLong(obj);
#else
  if (PyNumber_Check(obj))
    result = PyNumber_AsSsize_t(obj, NULL);
#endif
  else
    PyErr_Format(PyExc_TypeError, "Wrong type for hash function");
  return PyErr_Occurred() ? -1 : result;
}

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", obj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, val);
  Py_XINCREF(val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  _PyObject_GC_UNTRACK(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyObject *typeobject, PyObject *name, PyObject *value) {
  PyObject *attribute;
  PyTypeObject *type;
  descrsetfunc local_set;

  assert(PyType_Check(typeobject));
  type = (PyTypeObject *)typeobject;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "swig_static_var_getset_descriptor",      /* tp_name */
      sizeof(PyGetSetDescrObject),              /* tp_basicsize */
      0,                                        /* tp_itemsize */
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
#if PY_VERSION_HEX >= 0x02030000
      0,                                        /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                        /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                        /* tp_prev */
#endif
      0                                         /* tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    staticvar_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
#endif
  }
  return &staticvar_type;
}

SWIGINTERN PyTypeObject*
SwigPyObjectType(void) {
  static char swigpyobjecttype_doc[] = "Metaclass for SWIG wrapped types";
  static PyTypeObject swigpyobjecttype_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "SwigPyObjectType",                       /* tp_name */
      PyType_Type.tp_basicsize,                 /* tp_basicsize */
      0,                                        /* tp_itemsize */
      0,                                        /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      0,                                        /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      0,                                        /* tp_getattro */
      SwigPyObjectType_setattro,                /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      swigpyobjecttype_doc,                     /* tp_doc */
      0,                                        /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      0,                                        /* tp_descr_get */
      0,                                        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
#if PY_VERSION_HEX >= 0x02030000
      0,                                        /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                        /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                        /* tp_prev */
#endif
      0                                         /* tp_next */
#endif
    };
    swigpyobjecttype_type = tmp;
    type_init = 1;
    swigpyobjecttype_type.tp_base = &PyType_Type;
#if PY_VERSION_HEX < 0x02020000
    swigpyobjecttype_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobjecttype_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobjecttype_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  int base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  int i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
    Py_INCREF((PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x03000000
    type->ob_base.ob_base.ob_type = metatype;
#else
    type->ob_type = metatype;
#endif
}


/* Start of callback function macros for use in PyTypeObject */

typedef PyObject *(*SwigPyWrapperFunction)(PyObject *, PyObject *);

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_unaryfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_unaryfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_unaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)			\
SWIGINTERN void							\
wrapper##_destructor_closure(PyObject *a) {			\
    SwigPyBuiltin_destructor_closure(wrapper, #wrapper, a);	\
}
SWIGINTERN void
SwigPyBuiltin_destructor_closure(SwigPyWrapperFunction wrapper, const char *wrappername, PyObject *a) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)a;
  Py_XDECREF(sobj->dict);
  if (sobj->own) {
    PyObject *o;
    PyObject *val = 0, *type = 0, *tb = 0;
    PyErr_Fetch(&val, &type, &tb);
    o = wrapper(a, NULL);
    if (!o) {
      PyObject *deallocname = PyString_FromString(wrappername);
      PyErr_WriteUnraisable(deallocname);
      Py_DECREF(deallocname);
    }
    PyErr_Restore(val, type, tb);
    Py_XDECREF(o);
  }
  if (PyType_IS_GC(a->ob_type)) {
    PyObject_GC_Del(a);
  } else {
    PyObject_Del(a);
  }
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)			\
SWIGINTERN int						\
wrapper##_inquiry_closure(PyObject *a) {		\
  return SwigPyBuiltin_inquiry_closure(wrapper, a);	\
}
SWIGINTERN int
SwigPyBuiltin_inquiry_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  int result;
  pyresult = wrapper(a, NULL);
  result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_GETITERFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_getiterfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_getiterfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_getiterfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_binaryfunc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_binaryfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_binaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, b);
  Py_XINCREF(b);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ternaryfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternaryfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, b);
  PyTuple_SET_ITEM(tuple, 1, c);
  Py_XINCREF(b);
  Py_XINCREF(c);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)					\
SWIGINTERN PyObject *								\
wrapper##_ternarycallfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternarycallfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternarycallfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  (void) c;
  return wrapper(a, b);
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_lenfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_lenfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_ssize_t
SwigPyBuiltin_lenfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *resultobj;
  Py_ssize_t result;
  resultobj = wrapper(a, NULL);
  result = PyNumber_AsSsize_t(resultobj, NULL);
  Py_DECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *								\
wrapper##_ssizessizeargfunc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
  return SwigPyBuiltin_ssizessizeargfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizessizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)						\
SWIGINTERN int											\
wrapper##_ssizessizeobjargproc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {	\
  return SwigPyBuiltin_ssizessizeobjargproc_closure(wrapper, a, b, c, d);			\
}
SWIGINTERN int
SwigPyBuiltin_ssizessizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(d ? 3 : 2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  if (d) {
    PyTuple_SET_ITEM(tuple, 2, d);
    Py_INCREF(d);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_DECREF(tuple);
  Py_XDECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_funpack_ssizeargfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_funpack_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_ssizeargfunc_closure(wrapper, a, b);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *arg, *result;
  arg = _PyLong_FromSsize_t(b);
  result = wrapper(a, arg);
  Py_DECREF(arg);
  return result;
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_ssizeobjargproc_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
  return SwigPyBuiltin_ssizeobjargproc_closure(wrapper, a, b, c);		\
}
SWIGINTERN int
SwigPyBuiltin_ssizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, c);
  Py_XINCREF(c);
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_objobjargproc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_objobjargproc_closure(wrapper, a, b, c);			\
}
SWIGINTERN int
SwigPyBuiltin_objobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(c ? 2 : 1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, b);
  Py_XINCREF(b);
  if (c) {
    PyTuple_SET_ITEM(tuple, 1, c);
    Py_XINCREF(c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_reprfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_reprfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_reprfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)		\
SWIGINTERN Py_hash_t					\
wrapper##_hashfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_hashfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_hash_t
SwigPyBuiltin_hashfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  Py_hash_t result;
  pyresult = wrapper(a, NULL);
  if (!pyresult)
    return -1;
  result = SWIG_PyNumber_AsPyHash(pyresult);
  Py_DECREF(pyresult);
  return result;
}

#define SWIGPY_ITERNEXTFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_iternextfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_iternextfunc_closure(wrapper, a);\
}
SWIGINTERN PyObject *
SwigPyBuiltin_iternextfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

/* End of callback function macros for use in PyTypeObject */

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CERT_EXTENSION swig_types[0]
#define SWIGTYPE_p_CERT_PUBLIC_KEY_INFO swig_types[1]
#define SWIGTYPE_p_CRYPT_INTEGER_BLOB swig_types[2]
#define SWIGTYPE_p_Cert swig_types[3]
#define SWIGTYPE_p_CertExtension swig_types[4]
#define SWIGTYPE_p_CertFind swig_types[5]
#define SWIGTYPE_p_CertInfo swig_types[6]
#define SWIGTYPE_p_CertIter swig_types[7]
#define SWIGTYPE_p_CertRequest swig_types[8]
#define SWIGTYPE_p_CertStore swig_types[9]
#define SWIGTYPE_p_Crypt swig_types[10]
#define SWIGTYPE_p_CryptDesc swig_types[11]
#define SWIGTYPE_p_CryptIter swig_types[12]
#define SWIGTYPE_p_CryptMsg swig_types[13]
#define SWIGTYPE_p_EKUIter swig_types[14]
#define SWIGTYPE_p_ExtIter swig_types[15]
#define SWIGTYPE_p_FILETIME swig_types[16]
#define SWIGTYPE_p_Hash swig_types[17]
#define SWIGTYPE_p_Key swig_types[18]
#define SWIGTYPE_p_PCCERT_CONTEXT swig_types[19]
#define SWIGTYPE_p_PCERT_EXTENSION swig_types[20]
#define SWIGTYPE_p_RCObj swig_types[21]
#define SWIGTYPE_p_Signature swig_types[22]
#define SWIGTYPE_p_SwigPyObject swig_types[23]
#define SWIGTYPE_p__CERT_INFO swig_types[24]
#define SWIGTYPE_p__CMS_DH_KEY_INFO swig_types[25]
#define SWIGTYPE_p__CRYPTOAPI_BLOB swig_types[26]
#define SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER swig_types[27]
#define SWIGTYPE_p__CRYPT_BIT_BLOB swig_types[28]
#define SWIGTYPE_p__GUID swig_types[29]
#define SWIGTYPE_p__LARGE_INTEGER swig_types[30]
#define SWIGTYPE_p__LUID swig_types[31]
#define SWIGTYPE_p_char swig_types[32]
#define SWIGTYPE_p_float swig_types[33]
#define SWIGTYPE_p_int swig_types[34]
#define SWIGTYPE_p_long swig_types[35]
#define SWIGTYPE_p_long_long swig_types[36]
#define SWIGTYPE_p_p_unsigned_char swig_types[37]
#define SWIGTYPE_p_p_void swig_types[38]
#define SWIGTYPE_p_short swig_types[39]
#define SWIGTYPE_p_unsigned_char swig_types[40]
#define SWIGTYPE_p_unsigned_int swig_types[41]
#define SWIGTYPE_p_unsigned_long swig_types[42]
#define SWIGTYPE_p_unsigned_long_long swig_types[43]
#define SWIGTYPE_p_unsigned_short swig_types[44]
#define SWIGTYPE_p_void swig_types[45]
#define SWIGTYPE_p_wchar_t swig_types[46]
static swig_type_info *swig_types[48];
static swig_module_info swig_module = {swig_types, 47, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _csp.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__csp

#else
#  define SWIG_init    init_csp

#endif
#define SWIG_name    "_csp"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


#include "common.hpp"
#include "cert.hpp"
#include "certinfo.hpp"
#include "context.hpp"
#include "except.hpp"
#include "key.hpp"
#include "msg.hpp"
#include "rcobj.hpp"
#include "sign.hpp"
#include "request.hpp"
#include "hash.hpp"


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN void delete__CERT_INFO(_CERT_INFO *self){
        free(self);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_GUID_Data1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GUID_Data1_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data1_set" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GUID_Data1_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->Data1 = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GUID_Data1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "GUID_Data1_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data1_get" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned long) ((arg1)->Data1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GUID_Data2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GUID_Data2_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data2_set" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GUID_Data2_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->Data2 = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GUID_Data2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "GUID_Data2_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data2_get" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->Data2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GUID_Data3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GUID_Data3_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data3_set" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GUID_Data3_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->Data3 = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GUID_Data3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "GUID_Data3_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data3_get" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->Data3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GUID_Data4_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  unsigned char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GUID_Data4_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data4_set" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GUID_Data4_set" "', argument " "2"" of type '" "unsigned char [8]""'"); 
  } 
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      if (arg2) {
        size_t ii = 0;
        for (; ii < (size_t)8; ++ii) *(unsigned char *)&arg1->Data4[ii] = *((unsigned char *)arg2 + ii);
      } else {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Data4""' of type '""unsigned char [8]""'");
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GUID_Data4_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "GUID_Data4_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GUID_Data4_get" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned char *)(unsigned char *) ((arg1)->Data4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_GUID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_GUID takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_GUID *)new _GUID();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__GUID, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_GUID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _GUID *arg1 = (_GUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_GUID takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__GUID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GUID" "', argument " "1"" of type '" "_GUID *""'"); 
  }
  arg1 = reinterpret_cast< _GUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_GUID) /* defines _wrap_delete_GUID_destructor_closure */

SWIGINTERN PyObject *_wrap_LARGE_INTEGER_LowPart_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LARGE_INTEGER *arg1 = (_LARGE_INTEGER *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LARGE_INTEGER_LowPart_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LARGE_INTEGER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LARGE_INTEGER_LowPart_set" "', argument " "1"" of type '" "_LARGE_INTEGER *""'"); 
  }
  arg1 = reinterpret_cast< _LARGE_INTEGER * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->LowPart = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LARGE_INTEGER_LowPart_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LARGE_INTEGER *arg1 = (_LARGE_INTEGER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LARGE_INTEGER_LowPart_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LARGE_INTEGER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LARGE_INTEGER_LowPart_get" "', argument " "1"" of type '" "_LARGE_INTEGER *""'"); 
  }
  arg1 = reinterpret_cast< _LARGE_INTEGER * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->LowPart);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LARGE_INTEGER_HighPart_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LARGE_INTEGER *arg1 = (_LARGE_INTEGER *) 0 ;
  LONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LARGE_INTEGER_HighPart_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LARGE_INTEGER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LARGE_INTEGER_HighPart_set" "', argument " "1"" of type '" "_LARGE_INTEGER *""'"); 
  }
  arg1 = reinterpret_cast< _LARGE_INTEGER * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LARGE_INTEGER_HighPart_set" "', argument " "2"" of type '" "LONG""'");
  } 
  arg2 = static_cast< LONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->HighPart = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LARGE_INTEGER_HighPart_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LARGE_INTEGER *arg1 = (_LARGE_INTEGER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LONG result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LARGE_INTEGER_HighPart_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LARGE_INTEGER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LARGE_INTEGER_HighPart_get" "', argument " "1"" of type '" "_LARGE_INTEGER *""'"); 
  }
  arg1 = reinterpret_cast< _LARGE_INTEGER * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (LONG) ((arg1)->HighPart);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_LARGE_INTEGER(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LARGE_INTEGER *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_LARGE_INTEGER takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_LARGE_INTEGER *)new _LARGE_INTEGER();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__LARGE_INTEGER, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_LARGE_INTEGER(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LARGE_INTEGER *arg1 = (_LARGE_INTEGER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_LARGE_INTEGER takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LARGE_INTEGER, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LARGE_INTEGER" "', argument " "1"" of type '" "_LARGE_INTEGER *""'"); 
  }
  arg1 = reinterpret_cast< _LARGE_INTEGER * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_LARGE_INTEGER) /* defines _wrap_delete_LARGE_INTEGER_destructor_closure */

SWIGINTERN PyObject *_wrap_LUID_LowPart_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LUID *arg1 = (_LUID *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LUID_LowPart_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUID_LowPart_set" "', argument " "1"" of type '" "_LUID *""'"); 
  }
  arg1 = reinterpret_cast< _LUID * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->LowPart = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUID_LowPart_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LUID *arg1 = (_LUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LUID_LowPart_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUID_LowPart_get" "', argument " "1"" of type '" "_LUID *""'"); 
  }
  arg1 = reinterpret_cast< _LUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->LowPart);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUID_HighPart_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LUID *arg1 = (_LUID *) 0 ;
  LONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LUID_HighPart_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUID_HighPart_set" "', argument " "1"" of type '" "_LUID *""'"); 
  }
  arg1 = reinterpret_cast< _LUID * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LUID_HighPart_set" "', argument " "2"" of type '" "LONG""'");
  } 
  arg2 = static_cast< LONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->HighPart = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUID_HighPart_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LUID *arg1 = (_LUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LONG result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LUID_HighPart_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LUID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUID_HighPart_get" "', argument " "1"" of type '" "_LUID *""'"); 
  }
  arg1 = reinterpret_cast< _LUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (LONG) ((arg1)->HighPart);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_LUID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LUID *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_LUID takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_LUID *)new _LUID();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__LUID, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_LUID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _LUID *arg1 = (_LUID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_LUID takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__LUID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LUID" "', argument " "1"" of type '" "_LUID *""'"); 
  }
  arg1 = reinterpret_cast< _LUID * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_LUID) /* defines _wrap_delete_LUID_destructor_closure */

SWIGINTERN int _wrap_new_RCObj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RCObj *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_RCObj takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (RCObj *)new RCObj();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RCObj, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_RCObj(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RCObj *arg1 = (RCObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_RCObj takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RCObj, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RCObj" "', argument " "1"" of type '" "RCObj *""'"); 
  }
  arg1 = reinterpret_cast< RCObj * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RCObj_ref(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RCObj *arg1 = (RCObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "RCObj_ref takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RCObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RCObj_ref" "', argument " "1"" of type '" "RCObj *""'"); 
  }
  arg1 = reinterpret_cast< RCObj * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->ref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RCObj_unref(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RCObj *arg1 = (RCObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "RCObj_unref takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_RCObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RCObj_unref" "', argument " "1"" of type '" "RCObj *""'"); 
  }
  arg1 = reinterpret_cast< RCObj * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_RCObj) /* defines _wrap_delete_RCObj_destructor_closure */

SWIGINTERN PyObject *_wrap_CRYPTOAPI_BLOB_cbData_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPTOAPI_BLOB *arg1 = (_CRYPTOAPI_BLOB *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CRYPTOAPI_BLOB_cbData_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPTOAPI_BLOB_cbData_set" "', argument " "1"" of type '" "_CRYPTOAPI_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPTOAPI_BLOB * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cbData = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPTOAPI_BLOB_cbData_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPTOAPI_BLOB *arg1 = (_CRYPTOAPI_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CRYPTOAPI_BLOB_cbData_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPTOAPI_BLOB_cbData_get" "', argument " "1"" of type '" "_CRYPTOAPI_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPTOAPI_BLOB * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->cbData);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPTOAPI_BLOB_pbData_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPTOAPI_BLOB *arg1 = (_CRYPTOAPI_BLOB *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CRYPTOAPI_BLOB_pbData_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPTOAPI_BLOB_pbData_set" "', argument " "1"" of type '" "_CRYPTOAPI_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPTOAPI_BLOB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CRYPTOAPI_BLOB_pbData_set" "', argument " "2"" of type '" "BYTE *""'"); 
  }
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->pbData = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPTOAPI_BLOB_pbData_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPTOAPI_BLOB *arg1 = (_CRYPTOAPI_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CRYPTOAPI_BLOB_pbData_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPTOAPI_BLOB_pbData_get" "', argument " "1"" of type '" "_CRYPTOAPI_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPTOAPI_BLOB * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (BYTE *) ((arg1)->pbData);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CRYPTOAPI_BLOB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPTOAPI_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CRYPTOAPI_BLOB takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_CRYPTOAPI_BLOB *)new _CRYPTOAPI_BLOB();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPTOAPI_BLOB, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CRYPTOAPI_BLOB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPTOAPI_BLOB *arg1 = (_CRYPTOAPI_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CRYPTOAPI_BLOB takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPTOAPI_BLOB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRYPTOAPI_BLOB" "', argument " "1"" of type '" "_CRYPTOAPI_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPTOAPI_BLOB * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CRYPTOAPI_BLOB) /* defines _wrap_delete_CRYPTOAPI_BLOB_destructor_closure */

SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_dwVersion_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMS_DH_KEY_INFO_dwVersion_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_dwVersion_set" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->dwVersion = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_dwVersion_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CMS_DH_KEY_INFO_dwVersion_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_dwVersion_get" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->dwVersion);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_Algid_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  ALG_ID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMS_DH_KEY_INFO_Algid_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_Algid_set" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMS_DH_KEY_INFO_Algid_set" "', argument " "2"" of type '" "ALG_ID""'");
  } 
  arg2 = static_cast< ALG_ID >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->Algid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_Algid_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ALG_ID result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CMS_DH_KEY_INFO_Algid_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_Algid_get" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (ALG_ID) ((arg1)->Algid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_pszContentEncObjId_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  LPSTR arg2 = (LPSTR) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMS_DH_KEY_INFO_pszContentEncObjId_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_pszContentEncObjId_set" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMS_DH_KEY_INFO_pszContentEncObjId_set" "', argument " "2"" of type '" "LPSTR""'");
  }
  arg2 = reinterpret_cast< LPSTR >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1->pszContentEncObjId) delete[] arg1->pszContentEncObjId;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->pszContentEncObjId = (LPSTR)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->pszContentEncObjId = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_pszContentEncObjId_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LPSTR result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CMS_DH_KEY_INFO_pszContentEncObjId_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_pszContentEncObjId_get" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (LPSTR) ((arg1)->pszContentEncObjId);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_PubInfo_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  CRYPT_DATA_BLOB *arg2 = (CRYPT_DATA_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMS_DH_KEY_INFO_PubInfo_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_PubInfo_set" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMS_DH_KEY_INFO_PubInfo_set" "', argument " "2"" of type '" "CRYPT_DATA_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CRYPT_DATA_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->PubInfo = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_PubInfo_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_DATA_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CMS_DH_KEY_INFO_PubInfo_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_PubInfo_get" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CRYPT_DATA_BLOB *)& ((arg1)->PubInfo);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_pReserved_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMS_DH_KEY_INFO_pReserved_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_pReserved_set" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMS_DH_KEY_INFO_pReserved_set" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->pReserved = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMS_DH_KEY_INFO_pReserved_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CMS_DH_KEY_INFO_pReserved_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMS_DH_KEY_INFO_pReserved_get" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (void *) ((arg1)->pReserved);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CMS_DH_KEY_INFO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CMS_DH_KEY_INFO takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_CMS_DH_KEY_INFO *)new _CMS_DH_KEY_INFO();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CMS_DH_KEY_INFO, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CMS_DH_KEY_INFO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CMS_DH_KEY_INFO *arg1 = (_CMS_DH_KEY_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CMS_DH_KEY_INFO takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CMS_DH_KEY_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CMS_DH_KEY_INFO" "', argument " "1"" of type '" "_CMS_DH_KEY_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CMS_DH_KEY_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CMS_DH_KEY_INFO) /* defines _wrap_delete_CMS_DH_KEY_INFO_destructor_closure */

SWIGINTERN PyObject *_wrap_CRYPT_BIT_BLOB_cbData_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *arg1 = (_CRYPT_BIT_BLOB *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CRYPT_BIT_BLOB_cbData_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_BIT_BLOB_cbData_set" "', argument " "1"" of type '" "_CRYPT_BIT_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_BIT_BLOB * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cbData = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_BIT_BLOB_cbData_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *arg1 = (_CRYPT_BIT_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CRYPT_BIT_BLOB_cbData_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_BIT_BLOB_cbData_get" "', argument " "1"" of type '" "_CRYPT_BIT_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_BIT_BLOB * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->cbData);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_BIT_BLOB_pbData_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *arg1 = (_CRYPT_BIT_BLOB *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CRYPT_BIT_BLOB_pbData_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_BIT_BLOB_pbData_set" "', argument " "1"" of type '" "_CRYPT_BIT_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_BIT_BLOB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CRYPT_BIT_BLOB_pbData_set" "', argument " "2"" of type '" "BYTE *""'"); 
  }
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->pbData = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_BIT_BLOB_pbData_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *arg1 = (_CRYPT_BIT_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CRYPT_BIT_BLOB_pbData_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_BIT_BLOB_pbData_get" "', argument " "1"" of type '" "_CRYPT_BIT_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_BIT_BLOB * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (BYTE *) ((arg1)->pbData);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_BIT_BLOB_cUnusedBits_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *arg1 = (_CRYPT_BIT_BLOB *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CRYPT_BIT_BLOB_cUnusedBits_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_BIT_BLOB_cUnusedBits_set" "', argument " "1"" of type '" "_CRYPT_BIT_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_BIT_BLOB * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cUnusedBits = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_BIT_BLOB_cUnusedBits_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *arg1 = (_CRYPT_BIT_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CRYPT_BIT_BLOB_cUnusedBits_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_BIT_BLOB_cUnusedBits_get" "', argument " "1"" of type '" "_CRYPT_BIT_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_BIT_BLOB * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->cUnusedBits);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CRYPT_BIT_BLOB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CRYPT_BIT_BLOB takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_CRYPT_BIT_BLOB *)new _CRYPT_BIT_BLOB();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPT_BIT_BLOB, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CRYPT_BIT_BLOB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_BIT_BLOB *arg1 = (_CRYPT_BIT_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CRYPT_BIT_BLOB takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_BIT_BLOB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRYPT_BIT_BLOB" "', argument " "1"" of type '" "_CRYPT_BIT_BLOB *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_BIT_BLOB * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CRYPT_BIT_BLOB) /* defines _wrap_delete_CRYPT_BIT_BLOB_destructor_closure */

SWIGINTERN PyObject *_wrap_CRYPT_ALGORITHM_IDENTIFIER_pszObjId_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_ALGORITHM_IDENTIFIER *arg1 = (_CRYPT_ALGORITHM_IDENTIFIER *) 0 ;
  LPSTR arg2 = (LPSTR) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CRYPT_ALGORITHM_IDENTIFIER_pszObjId_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_ALGORITHM_IDENTIFIER_pszObjId_set" "', argument " "1"" of type '" "_CRYPT_ALGORITHM_IDENTIFIER *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_ALGORITHM_IDENTIFIER * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CRYPT_ALGORITHM_IDENTIFIER_pszObjId_set" "', argument " "2"" of type '" "LPSTR""'");
  }
  arg2 = reinterpret_cast< LPSTR >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1->pszObjId) delete[] arg1->pszObjId;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->pszObjId = (LPSTR)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->pszObjId = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_ALGORITHM_IDENTIFIER_pszObjId_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_ALGORITHM_IDENTIFIER *arg1 = (_CRYPT_ALGORITHM_IDENTIFIER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LPSTR result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CRYPT_ALGORITHM_IDENTIFIER_pszObjId_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_ALGORITHM_IDENTIFIER_pszObjId_get" "', argument " "1"" of type '" "_CRYPT_ALGORITHM_IDENTIFIER *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_ALGORITHM_IDENTIFIER * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (LPSTR) ((arg1)->pszObjId);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_ALGORITHM_IDENTIFIER_Parameters_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_ALGORITHM_IDENTIFIER *arg1 = (_CRYPT_ALGORITHM_IDENTIFIER *) 0 ;
  CRYPT_OBJID_BLOB *arg2 = (CRYPT_OBJID_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CRYPT_ALGORITHM_IDENTIFIER_Parameters_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_ALGORITHM_IDENTIFIER_Parameters_set" "', argument " "1"" of type '" "_CRYPT_ALGORITHM_IDENTIFIER *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_ALGORITHM_IDENTIFIER * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CRYPT_ALGORITHM_IDENTIFIER_Parameters_set" "', argument " "2"" of type '" "CRYPT_OBJID_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CRYPT_OBJID_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->Parameters = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CRYPT_ALGORITHM_IDENTIFIER_Parameters_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_ALGORITHM_IDENTIFIER *arg1 = (_CRYPT_ALGORITHM_IDENTIFIER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_OBJID_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CRYPT_ALGORITHM_IDENTIFIER_Parameters_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRYPT_ALGORITHM_IDENTIFIER_Parameters_get" "', argument " "1"" of type '" "_CRYPT_ALGORITHM_IDENTIFIER *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_ALGORITHM_IDENTIFIER * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CRYPT_OBJID_BLOB *)& ((arg1)->Parameters);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CRYPT_ALGORITHM_IDENTIFIER(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_ALGORITHM_IDENTIFIER *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CRYPT_ALGORITHM_IDENTIFIER takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_CRYPT_ALGORITHM_IDENTIFIER *)new _CRYPT_ALGORITHM_IDENTIFIER();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CRYPT_ALGORITHM_IDENTIFIER(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CRYPT_ALGORITHM_IDENTIFIER *arg1 = (_CRYPT_ALGORITHM_IDENTIFIER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CRYPT_ALGORITHM_IDENTIFIER takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRYPT_ALGORITHM_IDENTIFIER" "', argument " "1"" of type '" "_CRYPT_ALGORITHM_IDENTIFIER *""'"); 
  }
  arg1 = reinterpret_cast< _CRYPT_ALGORITHM_IDENTIFIER * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CRYPT_ALGORITHM_IDENTIFIER) /* defines _wrap_delete_CRYPT_ALGORITHM_IDENTIFIER_destructor_closure */

SWIGINTERN PyObject *_wrap_CryptDesc_type_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptDesc *arg1 = (CryptDesc *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CryptDesc_type_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptDesc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptDesc_type_set" "', argument " "1"" of type '" "CryptDesc *""'"); 
  }
  arg1 = reinterpret_cast< CryptDesc * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->type = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptDesc_type_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptDesc *arg1 = (CryptDesc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CryptDesc_type_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptDesc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptDesc_type_get" "', argument " "1"" of type '" "CryptDesc *""'"); 
  }
  arg1 = reinterpret_cast< CryptDesc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->type);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptDesc_name_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptDesc *arg1 = (CryptDesc *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CryptDesc_name_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptDesc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptDesc_name_set" "', argument " "1"" of type '" "CryptDesc *""'"); 
  }
  arg1 = reinterpret_cast< CryptDesc * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CryptDesc_name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1->name) delete[] arg1->name;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->name = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->name = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptDesc_name_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptDesc *arg1 = (CryptDesc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CryptDesc_name_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptDesc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptDesc_name_get" "', argument " "1"" of type '" "CryptDesc *""'"); 
  }
  arg1 = reinterpret_cast< CryptDesc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->name);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CryptDesc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptDesc *arg1 = (CryptDesc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CryptDesc takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptDesc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CryptDesc" "', argument " "1"" of type '" "CryptDesc *""'"); 
  }
  arg1 = reinterpret_cast< CryptDesc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CryptDesc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptDesc *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CryptDesc takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CryptDesc *)new CryptDesc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptDesc, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CryptDesc) /* defines _wrap_delete_CryptDesc_destructor_closure */

SWIGINTERN int _wrap_new_CryptIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CryptIter takes no arguments");
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CryptIter *)new CryptIter();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptIter, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_CryptIter___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptIter *arg1 = (CryptIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CryptIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CryptIter___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptIter___iter__" "', argument " "1"" of type '" "CryptIter *""'"); 
  }
  arg1 = reinterpret_cast< CryptIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CryptIter *)(arg1)->__iter__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptIter_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptIter *arg1 = (CryptIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CryptDesc *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CryptIter_next takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptIter_next" "', argument " "1"" of type '" "CryptIter *""'"); 
  }
  arg1 = reinterpret_cast< CryptIter * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CryptDesc *)(arg1)->next();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(Stop_Iteration &_e) {
    PyErr_SetNone(PyExc_StopIteration);
    SWIG_fail;
    
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptDesc, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CryptIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptIter *arg1 = (CryptIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CryptIter takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptIter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CryptIter" "', argument " "1"" of type '" "CryptIter *""'"); 
  }
  arg1 = reinterpret_cast< CryptIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_CryptIter___iter__) /* defines _wrap_CryptIter___iter___getiterfunc_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_CryptIter_next) /* defines _wrap_CryptIter_next_iternextfunc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CryptIter) /* defines _wrap_delete_CryptIter_destructor_closure */

SWIGINTERN PyObject *_wrap_Crypt_parent_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_parent_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_parent_set" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Crypt_parent_set" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->parent = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_parent_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Cert *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_parent_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_parent_get" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Cert *) ((arg1)->parent);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Crypt__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  char *arg5 = (char *) 0 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Crypt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Crypt",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj1, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj1, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Crypt" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
#if PY_VERSION_HEX >= 0x03000000
  arg3 = PyLong_AsUnsignedLong(obj2);
#else
  arg3 = PyInt_AsUnsignedLongMask(obj2);
#endif
#if PY_VERSION_HEX >= 0x03000000
  arg4 = PyLong_AsUnsignedLong(obj3);
#else
  arg4 = PyInt_AsUnsignedLongMask(obj3);
#endif
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Crypt" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Crypt *)new Crypt(arg1,arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Crypt, SWIG_BUILTIN_INIT |  0 );
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return -1;
}


SWIGINTERN int _wrap_new_Crypt__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Crypt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Crypt",&obj1,&obj2,&obj3)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj1, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj1, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Crypt" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
#if PY_VERSION_HEX >= 0x03000000
  arg3 = PyLong_AsUnsignedLong(obj2);
#else
  arg3 = PyInt_AsUnsignedLongMask(obj2);
#endif
#if PY_VERSION_HEX >= 0x03000000
  arg4 = PyLong_AsUnsignedLong(obj3);
#else
  arg4 = PyInt_AsUnsignedLongMask(obj3);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Crypt *)new Crypt(arg1,arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Crypt, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Crypt__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Crypt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Crypt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Crypt" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Crypt *)new Crypt(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Crypt, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Crypt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cert, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Crypt__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
#if py_version_hex>=0x03000000
      _v = PyBytes_Check(argv[0]) ? 1 : 0;
#else  
      _v = PyString_Check(argv[0]) ? 1 : 0;
#endif
    }
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        {
#if PY_VERSION_HEX >= 0x03000000
          _v = PyLong_Check(argv[2]) ? 1 : 0;
#else
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
#endif
        }
        if (_v) {
          return _wrap_new_Crypt__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
#if py_version_hex>=0x03000000
      _v = PyBytes_Check(argv[0]) ? 1 : 0;
#else  
      _v = PyString_Check(argv[0]) ? 1 : 0;
#endif
    }
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        {
#if PY_VERSION_HEX >= 0x03000000
          _v = PyLong_Check(argv[2]) ? 1 : 0;
#else
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
#endif
        }
        if (_v) {
          {
            int res = (PyString_Check(argv[3]) || Py_None == argv[3]) ? 1 : 0;
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Crypt__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Crypt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Crypt::Crypt(BYTE *,DWORD,DWORD,DWORD,char *)\n"
    "    Crypt::Crypt(BYTE *,DWORD,DWORD,DWORD)\n"
    "    Crypt::Crypt(Cert *)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Crypt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Crypt takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Crypt" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_name takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_name" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->name();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  delete[] result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_uniq_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_uniq_name takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_uniq_name" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->uniq_name();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  delete[] result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_prov_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_prov_name takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_prov_name" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->prov_name();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  delete[] result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_prov_type(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_prov_type takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_prov_type" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD)(arg1)->prov_type();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_create_key__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Key *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Crypt_create_key",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_create_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
#if PY_VERSION_HEX >= 0x03000000
  arg3 = PyLong_AsUnsignedLong(obj2);
#else
  arg3 = PyInt_AsUnsignedLongMask(obj2);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->create_key(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_create_key__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Key *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_create_key",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_create_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->create_key(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_create_key(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        return _wrap_Crypt_create_key__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        {
#if PY_VERSION_HEX >= 0x03000000
          _v = PyLong_Check(argv[2]) ? 1 : 0;
#else
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
#endif
        }
        if (_v) {
          return _wrap_Crypt_create_key__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Crypt_create_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Crypt::create_key(DWORD,DWORD)\n"
    "    Crypt::create_key(DWORD)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Crypt_get_key__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Key *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_get_key",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_get_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->get_key(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_get_key__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Key *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_get_key takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_get_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->get_key();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_get_key(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Crypt_get_key__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        return _wrap_Crypt_get_key__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Crypt_get_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Crypt::get_key(DWORD)\n"
    "    Crypt::get_key()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Crypt_import_key__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  Key *arg4 = (Key *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Key *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Crypt_import_key",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_import_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Crypt_import_key" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  res4 = SWIG_ConvertPtr(obj2, &argp4,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Crypt_import_key" "', argument " "4"" of type '" "Key *""'"); 
  }
  arg4 = reinterpret_cast< Key * >(argp4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->import_key(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_import_key__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  Key *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_import_key",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_import_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Crypt_import_key" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->import_key(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_import_key(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Crypt_import_key__SWIG_1(self, args);
        }
        return _wrap_Crypt_import_key__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Key, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Crypt_import_key__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Crypt_import_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Crypt::import_key(BYTE *,DWORD,Key *)\n"
    "    Crypt::import_key(BYTE *,DWORD)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Crypt_set_password__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  char *arg2 = (char *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Crypt_set_password",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_set_password" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Crypt_set_password" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
#if PY_VERSION_HEX >= 0x03000000
  arg3 = PyLong_AsUnsignedLong(obj2);
#else
  arg3 = PyInt_AsUnsignedLongMask(obj2);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->set_password(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_set_password__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_set_password",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_set_password" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Crypt_set_password" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->set_password(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_set_password(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = (PyString_Check(argv[1]) || Py_None == argv[1]) ? 1 : 0;
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Crypt_set_password__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = (PyString_Check(argv[1]) || Py_None == argv[1]) ? 1 : 0;
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
#if PY_VERSION_HEX >= 0x03000000
          _v = PyLong_Check(argv[2]) ? 1 : 0;
#else
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
#endif
        }
        if (_v) {
          return _wrap_Crypt_set_password__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Crypt_set_password'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Crypt::set_password(char *,DWORD)\n"
    "    Crypt::set_password(char *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Crypt_change_password(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_change_password",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_change_password" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Crypt_change_password" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->change_password(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_public_key__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  DWORD arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_public_key",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_public_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg4 = PyLong_AsUnsignedLong(obj1);
#else
  arg4 = PyInt_AsUnsignedLongMask(obj1);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->public_key(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_public_key__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_public_key takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_public_key" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->public_key(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_public_key(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Crypt_public_key__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        return _wrap_Crypt_public_key__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Crypt_public_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Crypt::public_key(BYTE **,DWORD *,DWORD)\n"
    "    Crypt::public_key(BYTE **,DWORD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Crypt_import_public_key_info(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  Key *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Crypt_import_public_key_info",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Crypt_import_public_key_info" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Crypt_import_public_key_info" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->import_public_key_info(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_remove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  char *arg4 = (char *) 0 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Crypt_remove",&obj0,&obj1,&obj2)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj0))
#else  
  if (PyString_Check(obj0))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj0, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj0, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj0);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Crypt_remove" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
#if PY_VERSION_HEX >= 0x03000000
  arg3 = PyLong_AsUnsignedLong(obj1);
#else
  arg3 = PyInt_AsUnsignedLongMask(obj1);
#endif
  res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Crypt_remove" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      Crypt::remove(arg1,arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Crypt_enumerate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Crypt_enumerate takes no arguments");
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CryptIter *)Crypt::enumerate();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Crypt) /* defines _wrap_delete_Crypt_destructor_closure */

SWIGINTERN int _wrap_new_Key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  RCObj *arg1 = (RCObj *) 0 ;
  HCRYPTKEY arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Key *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Key",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_RCObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Key" "', argument " "1"" of type '" "RCObj *""'"); 
  }
  arg1 = reinterpret_cast< RCObj * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Key" "', argument " "2"" of type '" "HCRYPTKEY""'");
  } 
  arg2 = static_cast< HCRYPTKEY >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)new Key(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Key takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Key" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Key_encode__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  Key *arg4 = (Key *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *res2 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (!PyArg_ParseTuple(args,(char *)"O:Key_encode",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key_encode" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  res4 = SWIG_ConvertPtr(obj1, &argp4,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Key_encode" "', argument " "4"" of type '" "Key *""'"); 
  }
  arg4 = reinterpret_cast< Key * >(argp4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->encode(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Key_encode__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Key_encode takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key_encode" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->encode(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Key_encode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Key, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Key_encode__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Key, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Key, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Key_encode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Key_encode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Key::encode(BYTE **,DWORD *,Key *)\n"
    "    Key::encode(BYTE **,DWORD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Key_store_cert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Key_store_cert",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key_store_cert" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Key_store_cert" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->store_cert(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Key_extract_cert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Key_extract_cert takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key_extract_cert" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->extract_cert(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Key_encrypt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  BYTE **arg4 = (BYTE **) 0 ;
  DWORD *arg5 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  BYTE *carray4 = 0 ;
  DWORD size4 = 0 ;
  PyObject *res4 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg4 = &carray4;
  arg5 = &size4;
  if (!PyArg_ParseTuple(args,(char *)"O:Key_encrypt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key_encrypt" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Key_encrypt" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->encrypt(arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg4) {
    if (*arg5 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res4 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg4), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res4 = PyBytes_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#else
      res4 = PyString_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res4);
    free(*arg4);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Key_decrypt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  BYTE **arg4 = (BYTE **) 0 ;
  DWORD *arg5 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  BYTE *carray4 = 0 ;
  DWORD size4 = 0 ;
  PyObject *res4 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg4 = &carray4;
  arg5 = &size4;
  if (!PyArg_ParseTuple(args,(char *)"O:Key_decrypt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key_decrypt" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Key_decrypt" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->decrypt(arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg4) {
    if (*arg5 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res4 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg4), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res4 = PyBytes_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#else
      res4 = PyString_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res4);
    free(*arg4);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Key_alg_id(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Key *arg1 = (Key *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ALG_ID result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Key_alg_id takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Key_alg_id" "', argument " "1"" of type '" "Key *""'"); 
  }
  arg1 = reinterpret_cast< Key * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (ALG_ID)(arg1)->alg_id();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Key) /* defines _wrap_delete_Key_destructor_closure */

SWIGINTERN PyObject *_wrap_Cert_duplicate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Cert *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Cert_duplicate takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_duplicate" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)(arg1)->duplicate();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_remove_from_store(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Cert_remove_from_store takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_remove_from_store" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->remove_from_store();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Cert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PCCERT_CONTEXT arg1 ;
  CertStore *arg2 = (CertStore *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Cert *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cert",&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_PCCERT_CONTEXT,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cert" "', argument " "1"" of type '" "PCCERT_CONTEXT""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cert" "', argument " "1"" of type '" "PCCERT_CONTEXT""'");
    } else {
      PCCERT_CONTEXT * temp = reinterpret_cast< PCCERT_CONTEXT * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj2, &argp2,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cert" "', argument " "2"" of type '" "CertStore *""'"); 
  }
  arg2 = reinterpret_cast< CertStore * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)new Cert(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Cert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PCCERT_CONTEXT arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Cert *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cert",&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_PCCERT_CONTEXT,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cert" "', argument " "1"" of type '" "PCCERT_CONTEXT""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cert" "', argument " "1"" of type '" "PCCERT_CONTEXT""'");
    } else {
      PCCERT_CONTEXT * temp = reinterpret_cast< PCCERT_CONTEXT * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)new Cert(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Cert__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  PyObject * obj1 = 0 ;
  Cert *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cert",&obj1)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj1, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj1, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Cert" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)new Cert(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Cert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_PCCERT_CONTEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Cert__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
#if py_version_hex>=0x03000000
      _v = PyBytes_Check(argv[0]) ? 1 : 0;
#else  
      _v = PyString_Check(argv[0]) ? 1 : 0;
#endif
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Cert__SWIG_2(self, args);
      }
      return _wrap_new_Cert__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_PCCERT_CONTEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CertStore, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Cert__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Cert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Cert::Cert(PCCERT_CONTEXT,CertStore *)\n"
    "    Cert::Cert(PCCERT_CONTEXT)\n"
    "    Cert::Cert(BYTE *,DWORD)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Cert_self_sign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Cert *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cert_self_sign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_self_sign" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Cert_self_sign" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)Cert::self_sign(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Cert takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cert" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_extract(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Cert_extract takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_extract" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->extract(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_thumbprint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Cert_thumbprint takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_thumbprint" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->thumbprint(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_subject_id(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Cert_subject_id takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_subject_id" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->subject_id(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_bind__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  Crypt *arg2 = (Crypt *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cert_bind",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_bind" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cert_bind" "', argument " "2"" of type '" "Crypt *""'"); 
  }
  arg2 = reinterpret_cast< Crypt * >(argp2);
#if PY_VERSION_HEX >= 0x03000000
  arg3 = PyLong_AsUnsignedLong(obj2);
#else
  arg3 = PyInt_AsUnsignedLongMask(obj2);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->bind(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_bind__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  Crypt *arg2 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cert_bind",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_bind" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cert_bind" "', argument " "2"" of type '" "Crypt *""'"); 
  }
  arg2 = reinterpret_cast< Crypt * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->bind(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_bind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cert, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Crypt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cert_bind__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cert, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Crypt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
#if PY_VERSION_HEX >= 0x03000000
          _v = PyLong_Check(argv[2]) ? 1 : 0;
#else
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
#endif
        }
        if (_v) {
          return _wrap_Cert_bind__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Cert_bind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Cert::bind(Crypt *,DWORD)\n"
    "    Cert::bind(Crypt *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cert_set_pin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cert_set_pin",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_set_pin" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cert_set_pin" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->set_pin(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cert_eku(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EKUIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Cert_eku takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cert_eku" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (EKUIter *)(arg1)->eku();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EKUIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Cert) /* defines _wrap_delete_Cert_destructor_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_Cert_eku) /* defines _wrap_Cert_eku_getiterfunc_closure */

SWIGINTERN PyObject *_wrap_CertIter_parent_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  CertStore *arg2 = (CertStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertIter_parent_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter_parent_set" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_CertStore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CertIter_parent_set" "', argument " "2"" of type '" "CertStore *""'"); 
  }
  arg2 = reinterpret_cast< CertStore * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->parent = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertIter_parent_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CertStore *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertIter_parent_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter_parent_get" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CertStore *) ((arg1)->parent);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertStore, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertIter_iter_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertIter_iter_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter_iter_set" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CertIter_iter_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->iter = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertIter_iter_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertIter_iter_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter_iter_get" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->iter);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertIter_pcert_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  PCCERT_CONTEXT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertIter_pcert_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter_pcert_set" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PCCERT_CONTEXT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CertIter_pcert_set" "', argument " "2"" of type '" "PCCERT_CONTEXT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CertIter_pcert_set" "', argument " "2"" of type '" "PCCERT_CONTEXT""'");
    } else {
      PCCERT_CONTEXT * temp = reinterpret_cast< PCCERT_CONTEXT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->pcert = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertIter_pcert_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PCCERT_CONTEXT result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertIter_pcert_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter_pcert_get" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->pcert);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new PCCERT_CONTEXT(static_cast< const PCCERT_CONTEXT& >(result))), SWIGTYPE_p_PCCERT_CONTEXT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CertIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  CertIter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CertIter",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertIter" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertIter *)new CertIter(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertIter, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_CertIter___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CertIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertIter___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter___iter__" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CertIter *)(arg1)->__iter__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CertIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CertIter takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CertIter" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertIter_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertIter *arg1 = (CertIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Cert *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertIter_next takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertIter_next" "', argument " "1"" of type '" "CertIter *""'"); 
  }
  arg1 = reinterpret_cast< CertIter * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)(arg1)->next();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(Stop_Iteration &_e) {
    PyErr_SetNone(PyExc_StopIteration);
    SWIG_fail;
    
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_CertIter___iter__) /* defines _wrap_CertIter___iter___getiterfunc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CertIter) /* defines _wrap_delete_CertIter_destructor_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_CertIter_next) /* defines _wrap_CertIter_next_iternextfunc_closure */

SWIGINTERN PyObject *_wrap_CertFind_chb_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  CRYPT_HASH_BLOB *arg2 = (CRYPT_HASH_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertFind_chb_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_chb_set" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CertFind_chb_set" "', argument " "2"" of type '" "CRYPT_HASH_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CRYPT_HASH_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->chb = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind_chb_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_HASH_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertFind_chb_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_chb_get" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CRYPT_HASH_BLOB *)& ((arg1)->chb);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind_param_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  CRYPT_HASH_BLOB *arg2 = (CRYPT_HASH_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertFind_param_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_param_set" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPTOAPI_BLOB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CertFind_param_set" "', argument " "2"" of type '" "CRYPT_HASH_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CRYPT_HASH_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->param = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind_param_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_HASH_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertFind_param_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_param_get" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CRYPT_HASH_BLOB *) ((arg1)->param);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind_enctype_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertFind_enctype_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_enctype_set" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->enctype = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind_enctype_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertFind_enctype_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_enctype_get" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->enctype);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind_findtype_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertFind_findtype_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_findtype_set" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->findtype = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind_findtype_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertFind_findtype_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_findtype_get" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->findtype);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CertFind__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  BYTE *arg4 = (BYTE *) 0 ;
  DWORD arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr4 = NULL ;
  Py_ssize_t len4 = 0 ;
  int res4 = 1 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  CertFind *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_CertFind",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertFind" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj2);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj2);
#endif
#if PY_VERSION_HEX >= 0x03000000
  arg3 = PyLong_AsUnsignedLong(obj3);
#else
  arg3 = PyInt_AsUnsignedLongMask(obj3);
#endif
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj4))
#else  
  if (PyString_Check(obj4))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res4 = PyBytes_AsStringAndSize(obj4, &cstr4, &len4);
#else
    res4 = PyString_AsStringAndSize(obj4, &cstr4, &len4);
#endif
    if (!cstr4) {
      res4 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj4);*/
    /*%#endif*/
  } 
  
  if(res4){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_CertFind" "', argument " "4"" of type '" "BYTE *""'");
  } else {
    arg4 = (BYTE *) cstr4;
    arg5 = (DWORD) len4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CertFind *)new CertFind(arg1,arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertFind, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CertFind(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CertFind takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CertFind" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CertFind__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  DWORD arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  DWORD arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr3 = NULL ;
  Py_ssize_t len3 = 0 ;
  int res3 = 1 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  CertFind *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CertFind",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertFind" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj2);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj2);
#endif
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj3))
#else  
  if (PyString_Check(obj3))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res3 = PyBytes_AsStringAndSize(obj3, &cstr3, &len3);
#else
    res3 = PyString_AsStringAndSize(obj3, &cstr3, &len3);
#endif
    if (!cstr3) {
      res3 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj3);*/
    /*%#endif*/
  } 
  
  if(res3){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_CertFind" "', argument " "3"" of type '" "BYTE *""'");
  } else {
    arg3 = (BYTE *) cstr3;
    arg4 = (DWORD) len3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CertFind *)new CertFind(arg1,arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertFind, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CertFind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CertStore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        {
#if py_version_hex>=0x03000000
          _v = PyBytes_Check(argv[2]) ? 1 : 0;
#else  
          _v = PyString_Check(argv[2]) ? 1 : 0;
#endif
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_CertFind__SWIG_1(self, args);
          }
          return _wrap_new_CertFind__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CertStore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        {
#if PY_VERSION_HEX >= 0x03000000
          _v = PyLong_Check(argv[2]) ? 1 : 0;
#else
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
#endif
        }
        if (_v) {
          {
#if py_version_hex>=0x03000000
            _v = PyBytes_Check(argv[3]) ? 1 : 0;
#else  
            _v = PyString_Check(argv[3]) ? 1 : 0;
#endif
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_CertFind__SWIG_0(self, args);
            }
            return _wrap_new_CertFind__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CertFind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CertFind::CertFind(CertStore *,DWORD,DWORD,BYTE *,DWORD)\n"
    "    CertFind::CertFind(CertStore *,DWORD,BYTE *,DWORD)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_CertFind_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Cert *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertFind_next takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind_next" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)(arg1)->next();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(Stop_Iteration &_e) {
    PyErr_SetNone(PyExc_StopIteration);
    SWIG_fail;
    
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertFind___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertFind *arg1 = (CertFind *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CertFind *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertFind___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertFind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertFind___iter__" "', argument " "1"" of type '" "CertFind *""'"); 
  }
  arg1 = reinterpret_cast< CertFind * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CertFind *)(arg1)->__iter__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertFind, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CertFind) /* defines _wrap_delete_CertFind_destructor_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_CertFind_next) /* defines _wrap_CertFind_next_iternextfunc_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_CertFind___iter__) /* defines _wrap_CertFind___iter___getiterfunc_closure */

SWIGINTERN int _wrap_new_CertStore__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  CertStore *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CertStore",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertStore" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertStore *)new CertStore(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertStore, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CertStore__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CertStore takes no arguments");
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertStore *)new CertStore();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertStore, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CertStore__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CertStore *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CertStore",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertStore" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj2))
#else  
  if (PyString_Check(obj2))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj2, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj2, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj2);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_CertStore" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertStore *)new CertStore(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertStore, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CertStore(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CertStore__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CryptMsg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CertStore__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_CertStore__SWIG_2(self, args);
        }
        return _wrap_new_CertStore__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CertStore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CertStore::CertStore(CryptMsg *)\n"
    "    CertStore::CertStore()\n"
    "    CertStore::CertStore(Crypt *,BYTE *,DWORD)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CertStore(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CertStore takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertStore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CertStore" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertStore___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CertIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertStore___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertStore___iter__" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertIter *)(arg1)->__iter__();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertStore_find_by_thumb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  CertFind *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertStore_find_by_thumb",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertStore_find_by_thumb" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CertStore_find_by_thumb" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertFind *)(arg1)->find_by_thumb(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertFind, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertStore_find_by_name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  CertFind *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertStore_find_by_name",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertStore_find_by_name" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CertStore_find_by_name" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertFind *)(arg1)->find_by_name(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertFind, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertStore_get_cert_by_info(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  CertInfo *arg2 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  Cert *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertStore_get_cert_by_info",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertStore_get_cert_by_info" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CertStore_get_cert_by_info" "', argument " "2"" of type '" "CertInfo *""'"); 
  }
  arg2 = reinterpret_cast< CertInfo * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)(arg1)->get_cert_by_info(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertStore_add_cert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertStore *arg1 = (CertStore *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  Cert *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertStore_add_cert",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertStore_add_cert" "', argument " "1"" of type '" "CertStore *""'"); 
  }
  arg1 = reinterpret_cast< CertStore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CertStore_add_cert" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Cert *)(arg1)->add_cert(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cert, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CertStore) /* defines _wrap_delete_CertStore_destructor_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_CertStore___iter__) /* defines _wrap_CertStore___iter___getiterfunc_closure */

SWIGINTERN int _wrap_new_EKUIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  EKUIter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EKUIter",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EKUIter" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (EKUIter *)new EKUIter(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EKUIter, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_EKUIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  EKUIter *arg1 = (EKUIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_EKUIter takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_EKUIter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EKUIter" "', argument " "1"" of type '" "EKUIter *""'"); 
  }
  arg1 = reinterpret_cast< EKUIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EKUIter___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  EKUIter *arg1 = (EKUIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EKUIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "EKUIter___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_EKUIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EKUIter___iter__" "', argument " "1"" of type '" "EKUIter *""'"); 
  }
  arg1 = reinterpret_cast< EKUIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (EKUIter *)(arg1)->__iter__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EKUIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EKUIter_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  EKUIter *arg1 = (EKUIter *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "EKUIter_next takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_EKUIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EKUIter_next" "', argument " "1"" of type '" "EKUIter *""'"); 
  }
  arg1 = reinterpret_cast< EKUIter * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->next(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(Stop_Iteration &_e) {
    PyErr_SetNone(PyExc_StopIteration);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_EKUIter) /* defines _wrap_delete_EKUIter_destructor_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_EKUIter___iter__) /* defines _wrap_EKUIter___iter___getiterfunc_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_EKUIter_next) /* defines _wrap_EKUIter_next_iternextfunc_closure */

SWIGINTERN int _wrap_new_CertInfo__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Cert *arg1 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  CertInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CertInfo",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertInfo" "', argument " "1"" of type '" "Cert *""'"); 
  }
  arg1 = reinterpret_cast< Cert * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertInfo *)new CertInfo(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertInfo, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CertInfo__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CertInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CertInfo",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertInfo" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj2);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj2);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertInfo *)new CertInfo(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertInfo, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CertInfo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cert, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CertInfo__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CryptMsg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        return _wrap_new_CertInfo__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CertInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CertInfo::CertInfo(Cert *)\n"
    "    CertInfo::CertInfo(CryptMsg *,DWORD)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CertInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CertInfo takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CertInfo" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_version(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_version takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_version" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD)(arg1)->version();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_issuer__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *res2 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (!PyArg_ParseTuple(args,(char *)"O:CertInfo_issuer",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_issuer" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  ecode4 = SWIG_AsVal_bool(obj1, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CertInfo_issuer" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->issuer(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_issuer__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_issuer takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_issuer" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->issuer(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_issuer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CertInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CertInfo_issuer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CertInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CertInfo_issuer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CertInfo_issuer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CertInfo::issuer(BYTE **,DWORD *,bool)\n"
    "    CertInfo::issuer(BYTE **,DWORD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CertInfo_name__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *res2 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (!PyArg_ParseTuple(args,(char *)"O:CertInfo_name",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_name" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  ecode4 = SWIG_AsVal_bool(obj1, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CertInfo_name" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->name(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_name__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_name takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_name" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->name(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_name(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CertInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CertInfo_name__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CertInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CertInfo_name__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CertInfo_name'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CertInfo::name(BYTE **,DWORD *,bool)\n"
    "    CertInfo::name(BYTE **,DWORD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CertInfo_not_before(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_not_before takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_not_before" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->not_before(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_not_after(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_not_after takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_not_after" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->not_after(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_usage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_usage takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_usage" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (BYTE)(arg1)->usage();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_sign_algorithm(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_sign_algorithm takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_sign_algorithm" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->sign_algorithm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_public_key_algorithm(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_public_key_algorithm takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_public_key_algorithm" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->public_key_algorithm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_serial(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_serial takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_serial" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->serial(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertInfo_extensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ExtIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertInfo_extensions takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertInfo_extensions" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (ExtIter *)(arg1)->extensions();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CertInfo) /* defines _wrap_delete_CertInfo_destructor_closure */

SWIGINTERN int _wrap_new_ExtIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertInfo *arg1 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ExtIter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ExtIter",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExtIter" "', argument " "1"" of type '" "CertInfo *""'"); 
  }
  arg1 = reinterpret_cast< CertInfo * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (ExtIter *)new ExtIter(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtIter, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_ExtIter___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtIter *arg1 = (ExtIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ExtIter *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExtIter___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ExtIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtIter___iter__" "', argument " "1"" of type '" "ExtIter *""'"); 
  }
  arg1 = reinterpret_cast< ExtIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (ExtIter *)(arg1)->__iter__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtIter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExtIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtIter *arg1 = (ExtIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_ExtIter takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ExtIter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExtIter" "', argument " "1"" of type '" "ExtIter *""'"); 
  }
  arg1 = reinterpret_cast< ExtIter * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtIter_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtIter *arg1 = (ExtIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CertExtension *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExtIter_next takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ExtIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtIter_next" "', argument " "1"" of type '" "ExtIter *""'"); 
  }
  arg1 = reinterpret_cast< ExtIter * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertExtension *)(arg1)->next();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(Stop_Iteration &_e) {
    PyErr_SetNone(PyExc_StopIteration);
    SWIG_fail;
    
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertExtension, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_ExtIter___iter__) /* defines _wrap_ExtIter___iter___getiterfunc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ExtIter) /* defines _wrap_delete_ExtIter_destructor_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_ExtIter_next) /* defines _wrap_ExtIter_next_iternextfunc_closure */

SWIGINTERN int _wrap_new_CryptMsg__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  Crypt *arg3 = (Crypt *) 0 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CryptMsg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CryptMsg",&obj1,&obj2)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj1, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj1, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_CryptMsg" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CryptMsg" "', argument " "3"" of type '" "Crypt *""'"); 
  }
  arg3 = reinterpret_cast< Crypt * >(argp3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CryptMsg *)new CryptMsg(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptMsg, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CryptMsg__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  PyObject * obj1 = 0 ;
  CryptMsg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CryptMsg",&obj1)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj1, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj1, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_CryptMsg" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CryptMsg *)new CryptMsg(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptMsg, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CryptMsg__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  CryptMsg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CryptMsg",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CryptMsg" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CryptMsg *)new CryptMsg(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptMsg, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CryptMsg__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CryptMsg takes no arguments");
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CryptMsg *)new CryptMsg();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CryptMsg, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CryptMsg(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CryptMsg__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CryptMsg__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
#if py_version_hex>=0x03000000
      _v = PyBytes_Check(argv[0]) ? 1 : 0;
#else  
      _v = PyString_Check(argv[0]) ? 1 : 0;
#endif
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_CryptMsg__SWIG_1(self, args);
      }
      return _wrap_new_CryptMsg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
#if py_version_hex>=0x03000000
      _v = PyBytes_Check(argv[0]) ? 1 : 0;
#else  
      _v = PyString_Check(argv[0]) ? 1 : 0;
#endif
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Crypt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CryptMsg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CryptMsg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CryptMsg::CryptMsg(BYTE *,DWORD,Crypt *)\n"
    "    CryptMsg::CryptMsg(BYTE *,DWORD)\n"
    "    CryptMsg::CryptMsg(Crypt *)\n"
    "    CryptMsg::CryptMsg()\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_CryptMsg_decrypt_by_cert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CryptMsg_decrypt_by_cert",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_decrypt_by_cert" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CryptMsg_decrypt_by_cert" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->decrypt_by_cert(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CryptMsg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CryptMsg takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CryptMsg" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_num_signers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CryptMsg_num_signers takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_num_signers" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (int)(arg1)->num_signers();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_get_data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CryptMsg_get_data takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_get_data" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->get_data(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_verify_cert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CryptMsg_verify_cert",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_verify_cert" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CryptMsg_verify_cert" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (bool)(arg1)->verify_cert(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_get_type(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CryptMsg_get_type takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_get_type" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (DWORD)(arg1)->get_type();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_add_recipient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CryptMsg_add_recipient",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_add_recipient" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CryptMsg_add_recipient" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->add_recipient(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_encrypt_data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  BYTE **arg4 = (BYTE **) 0 ;
  DWORD *arg5 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  BYTE *carray4 = 0 ;
  DWORD size4 = 0 ;
  PyObject *res4 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg4 = &carray4;
  arg5 = &size4;
  if (!PyArg_ParseTuple(args,(char *)"O:CryptMsg_encrypt_data",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_encrypt_data" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CryptMsg_encrypt_data" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->encrypt_data(arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg4) {
    if (*arg5 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res4 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg4), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res4 = PyBytes_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#else
      res4 = PyString_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res4);
    free(*arg4);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_decrypt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  CertStore *arg4 = (CertStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *res2 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (!PyArg_ParseTuple(args,(char *)"O:CryptMsg_decrypt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_decrypt" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
  res4 = SWIG_ConvertPtr(obj1, &argp4,SWIGTYPE_p_CertStore, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CryptMsg_decrypt" "', argument " "4"" of type '" "CertStore *""'"); 
  }
  arg4 = reinterpret_cast< CertStore * >(argp4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->decrypt(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  catch(CSPNotFound &_e) {
    PyErr_SetString(PyExc_ValueError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_sign_data__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  BYTE **arg4 = (BYTE **) 0 ;
  DWORD *arg5 = (DWORD *) 0 ;
  Cert *arg6 = (Cert *) 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  BYTE *carray4 = 0 ;
  DWORD size4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject *res4 = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  arg4 = &carray4;
  arg5 = &size4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:CryptMsg_sign_data",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_sign_data" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CryptMsg_sign_data" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  res6 = SWIG_ConvertPtr(obj2, &argp6,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CryptMsg_sign_data" "', argument " "6"" of type '" "Cert *""'"); 
  }
  arg6 = reinterpret_cast< Cert * >(argp6);
  ecode7 = SWIG_AsVal_bool(obj3, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CryptMsg_sign_data" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->sign_data(arg2,arg3,arg4,arg5,arg6,arg7);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg4) {
    if (*arg5 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res4 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg4), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res4 = PyBytes_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#else
      res4 = PyString_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res4);
    free(*arg4);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_sign_data__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  BYTE **arg4 = (BYTE **) 0 ;
  DWORD *arg5 = (DWORD *) 0 ;
  Cert *arg6 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  BYTE *carray4 = 0 ;
  DWORD size4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *res4 = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  arg4 = &carray4;
  arg5 = &size4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CryptMsg_sign_data",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_sign_data" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CryptMsg_sign_data" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  res6 = SWIG_ConvertPtr(obj2, &argp6,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CryptMsg_sign_data" "', argument " "6"" of type '" "Cert *""'"); 
  }
  arg6 = reinterpret_cast< Cert * >(argp6);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->sign_data(arg2,arg3,arg4,arg5,arg6);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg4) {
    if (*arg5 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res4 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg4), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res4 = PyBytes_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#else
      res4 = PyString_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res4);
    free(*arg4);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CryptMsg_sign_data(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CryptMsg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Cert, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CryptMsg_sign_data__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CryptMsg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Cert, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CryptMsg_sign_data__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CryptMsg_sign_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CryptMsg::sign_data(BYTE *,DWORD,BYTE **,DWORD *,Cert *,bool)\n"
    "    CryptMsg::sign_data(BYTE *,DWORD,BYTE **,DWORD *,Cert *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CryptMsg_verify(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CryptMsg *arg1 = (CryptMsg *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CryptMsg_verify",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CryptMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CryptMsg_verify" "', argument " "1"" of type '" "CryptMsg *""'"); 
  }
  arg1 = reinterpret_cast< CryptMsg * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (bool)(arg1)->verify(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CryptMsg) /* defines _wrap_delete_CryptMsg_destructor_closure */

SWIGINTERN PyObject *_wrap_CERT_INFO_dwVersion_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_dwVersion_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_dwVersion_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->dwVersion = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_dwVersion_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_dwVersion_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_dwVersion_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->dwVersion);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SerialNumber_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  CRYPT_INTEGER_BLOB arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_SerialNumber_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SerialNumber_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CRYPT_INTEGER_BLOB,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_SerialNumber_set" "', argument " "2"" of type '" "CRYPT_INTEGER_BLOB""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CERT_INFO_SerialNumber_set" "', argument " "2"" of type '" "CRYPT_INTEGER_BLOB""'");
    } else {
      CRYPT_INTEGER_BLOB * temp = reinterpret_cast< CRYPT_INTEGER_BLOB * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->SerialNumber = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SerialNumber_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_INTEGER_BLOB result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_SerialNumber_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SerialNumber_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->SerialNumber);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new CRYPT_INTEGER_BLOB(static_cast< const CRYPT_INTEGER_BLOB& >(result))), SWIGTYPE_p_CRYPT_INTEGER_BLOB, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SignatureAlgorithm_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  CRYPT_ALGORITHM_IDENTIFIER *arg2 = (CRYPT_ALGORITHM_IDENTIFIER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_SignatureAlgorithm_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SignatureAlgorithm_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_SignatureAlgorithm_set" "', argument " "2"" of type '" "CRYPT_ALGORITHM_IDENTIFIER *""'"); 
  }
  arg2 = reinterpret_cast< CRYPT_ALGORITHM_IDENTIFIER * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->SignatureAlgorithm = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SignatureAlgorithm_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_ALGORITHM_IDENTIFIER *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_SignatureAlgorithm_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SignatureAlgorithm_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CRYPT_ALGORITHM_IDENTIFIER *)& ((arg1)->SignatureAlgorithm);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPT_ALGORITHM_IDENTIFIER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_Issuer_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  CERT_NAME_BLOB *arg2 = (CERT_NAME_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_Issuer_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_Issuer_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_Issuer_set" "', argument " "2"" of type '" "CERT_NAME_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CERT_NAME_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->Issuer = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_Issuer_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CERT_NAME_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_Issuer_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_Issuer_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CERT_NAME_BLOB *)& ((arg1)->Issuer);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_NotBefore_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  FILETIME arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_NotBefore_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_NotBefore_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FILETIME,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_NotBefore_set" "', argument " "2"" of type '" "FILETIME""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CERT_INFO_NotBefore_set" "', argument " "2"" of type '" "FILETIME""'");
    } else {
      FILETIME * temp = reinterpret_cast< FILETIME * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->NotBefore = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_NotBefore_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FILETIME result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_NotBefore_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_NotBefore_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->NotBefore);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new FILETIME(static_cast< const FILETIME& >(result))), SWIGTYPE_p_FILETIME, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_NotAfter_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  FILETIME arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_NotAfter_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_NotAfter_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FILETIME,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_NotAfter_set" "', argument " "2"" of type '" "FILETIME""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CERT_INFO_NotAfter_set" "', argument " "2"" of type '" "FILETIME""'");
    } else {
      FILETIME * temp = reinterpret_cast< FILETIME * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->NotAfter = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_NotAfter_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FILETIME result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_NotAfter_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_NotAfter_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->NotAfter);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new FILETIME(static_cast< const FILETIME& >(result))), SWIGTYPE_p_FILETIME, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_Subject_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  CERT_NAME_BLOB *arg2 = (CERT_NAME_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_Subject_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_Subject_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_Subject_set" "', argument " "2"" of type '" "CERT_NAME_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CERT_NAME_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->Subject = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_Subject_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CERT_NAME_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_Subject_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_Subject_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CERT_NAME_BLOB *)& ((arg1)->Subject);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPTOAPI_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SubjectPublicKeyInfo_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  CERT_PUBLIC_KEY_INFO arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_SubjectPublicKeyInfo_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SubjectPublicKeyInfo_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CERT_PUBLIC_KEY_INFO,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_SubjectPublicKeyInfo_set" "', argument " "2"" of type '" "CERT_PUBLIC_KEY_INFO""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CERT_INFO_SubjectPublicKeyInfo_set" "', argument " "2"" of type '" "CERT_PUBLIC_KEY_INFO""'");
    } else {
      CERT_PUBLIC_KEY_INFO * temp = reinterpret_cast< CERT_PUBLIC_KEY_INFO * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->SubjectPublicKeyInfo = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SubjectPublicKeyInfo_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CERT_PUBLIC_KEY_INFO result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_SubjectPublicKeyInfo_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SubjectPublicKeyInfo_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->SubjectPublicKeyInfo);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new CERT_PUBLIC_KEY_INFO(static_cast< const CERT_PUBLIC_KEY_INFO& >(result))), SWIGTYPE_p_CERT_PUBLIC_KEY_INFO, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_IssuerUniqueId_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  CRYPT_BIT_BLOB *arg2 = (CRYPT_BIT_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_IssuerUniqueId_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_IssuerUniqueId_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_IssuerUniqueId_set" "', argument " "2"" of type '" "CRYPT_BIT_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CRYPT_BIT_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->IssuerUniqueId = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_IssuerUniqueId_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_BIT_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_IssuerUniqueId_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_IssuerUniqueId_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CRYPT_BIT_BLOB *)& ((arg1)->IssuerUniqueId);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SubjectUniqueId_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  CRYPT_BIT_BLOB *arg2 = (CRYPT_BIT_BLOB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_SubjectUniqueId_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SubjectUniqueId_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_SubjectUniqueId_set" "', argument " "2"" of type '" "CRYPT_BIT_BLOB *""'"); 
  }
  arg2 = reinterpret_cast< CRYPT_BIT_BLOB * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->SubjectUniqueId = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_SubjectUniqueId_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CRYPT_BIT_BLOB *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_SubjectUniqueId_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_SubjectUniqueId_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (CRYPT_BIT_BLOB *)& ((arg1)->SubjectUniqueId);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CRYPT_BIT_BLOB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_cExtension_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_cExtension_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_cExtension_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg2 = PyLong_AsUnsignedLong(obj1);
#else
  arg2 = PyInt_AsUnsignedLongMask(obj1);
#endif
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cExtension = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_cExtension_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_cExtension_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_cExtension_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (DWORD) ((arg1)->cExtension);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_rgExtension_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  PCERT_EXTENSION arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CERT_INFO_rgExtension_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_rgExtension_set" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PCERT_EXTENSION,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CERT_INFO_rgExtension_set" "', argument " "2"" of type '" "PCERT_EXTENSION""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CERT_INFO_rgExtension_set" "', argument " "2"" of type '" "PCERT_EXTENSION""'");
    } else {
      PCERT_EXTENSION * temp = reinterpret_cast< PCERT_EXTENSION * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rgExtension = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CERT_INFO_rgExtension_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PCERT_EXTENSION result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CERT_INFO_rgExtension_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CERT_INFO_rgExtension_get" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->rgExtension);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new PCERT_EXTENSION(static_cast< const PCERT_EXTENSION& >(result))), SWIGTYPE_p_PCERT_EXTENSION, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CERT_INFO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *arg1 = (_CERT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CERT_INFO takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p__CERT_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CERT_INFO" "', argument " "1"" of type '" "_CERT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< _CERT_INFO * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete__CERT_INFO(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CERT_INFO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  _CERT_INFO *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CERT_INFO takes no arguments");
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (_CERT_INFO *)new _CERT_INFO();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__CERT_INFO, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CERT_INFO) /* defines _wrap_delete_CERT_INFO_destructor_closure */

SWIGINTERN int _wrap_new_CertExtension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CERT_EXTENSION *arg1 = (CERT_EXTENSION *) 0 ;
  CertInfo *arg2 = (CertInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CertExtension *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CertExtension",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_CERT_EXTENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertExtension" "', argument " "1"" of type '" "CERT_EXTENSION *""'"); 
  }
  arg1 = reinterpret_cast< CERT_EXTENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj2, &argp2,SWIGTYPE_p_CertInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CertExtension" "', argument " "2"" of type '" "CertInfo *""'"); 
  }
  arg2 = reinterpret_cast< CertInfo * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertExtension *)new CertExtension(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertExtension, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CertExtension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertExtension *arg1 = (CertExtension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CertExtension takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertExtension, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CertExtension" "', argument " "1"" of type '" "CertExtension *""'"); 
  }
  arg1 = reinterpret_cast< CertExtension * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertExtension_oid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertExtension *arg1 = (CertExtension *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertExtension_oid takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertExtension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertExtension_oid" "', argument " "1"" of type '" "CertExtension *""'"); 
  }
  arg1 = reinterpret_cast< CertExtension * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->oid(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CertExtension) /* defines _wrap_delete_CertExtension_destructor_closure */

SWIGINTERN int _wrap_new_Signature__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Signature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Signature",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Signature" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Signature *)new Signature(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Signature, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Signature__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Signature *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_Signature takes no arguments");
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Signature *)new Signature();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Signature, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Signature__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  Crypt *arg3 = (Crypt *) 0 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Signature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Signature",&obj1,&obj2)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj1, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj1, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Signature" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Signature" "', argument " "3"" of type '" "Crypt *""'"); 
  }
  arg3 = reinterpret_cast< Crypt * >(argp3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Signature *)new Signature(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Signature, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Signature__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BYTE *arg1 = (BYTE *) 0 ;
  DWORD arg2 ;
  char *cstr1 = NULL ;
  Py_ssize_t len1 = 0 ;
  int res1 = 1 ;
  PyObject * obj1 = 0 ;
  Signature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Signature",&obj1)) SWIG_fail;
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res1 = PyBytes_AsStringAndSize(obj1, &cstr1, &len1);
#else
    res1 = PyString_AsStringAndSize(obj1, &cstr1, &len1);
#endif
    if (!cstr1) {
      res1 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res1){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Signature" "', argument " "1"" of type '" "BYTE *""'");
  } else {
    arg1 = (BYTE *) cstr1;
    arg2 = (DWORD) len1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Signature *)new Signature(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Signature, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Signature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Signature__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Signature__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
#if py_version_hex>=0x03000000
      _v = PyBytes_Check(argv[0]) ? 1 : 0;
#else  
      _v = PyString_Check(argv[0]) ? 1 : 0;
#endif
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Signature__SWIG_3(self, args);
      }
      return _wrap_new_Signature__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
#if py_version_hex>=0x03000000
      _v = PyBytes_Check(argv[0]) ? 1 : 0;
#else  
      _v = PyString_Check(argv[0]) ? 1 : 0;
#endif
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Crypt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Signature__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Signature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Signature::Signature(Crypt *)\n"
    "    Signature::Signature()\n"
    "    Signature::Signature(BYTE *,DWORD,Crypt *)\n"
    "    Signature::Signature(BYTE *,DWORD)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Signature_verify_data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Signature *arg1 = (Signature *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Signature_verify_data",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Signature_verify_data" "', argument " "1"" of type '" "Signature *""'"); 
  }
  arg1 = reinterpret_cast< Signature * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Signature_verify_data" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  ecode4 = SWIG_AsVal_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Signature_verify_data" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (bool)(arg1)->verify_data(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Signature_sign_data__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Signature *arg1 = (Signature *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  BYTE **arg4 = (BYTE **) 0 ;
  DWORD *arg5 = (DWORD *) 0 ;
  Cert *arg6 = (Cert *) 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  BYTE *carray4 = 0 ;
  DWORD size4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject *res4 = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  arg4 = &carray4;
  arg5 = &size4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:Signature_sign_data",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Signature_sign_data" "', argument " "1"" of type '" "Signature *""'"); 
  }
  arg1 = reinterpret_cast< Signature * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Signature_sign_data" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  res6 = SWIG_ConvertPtr(obj2, &argp6,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Signature_sign_data" "', argument " "6"" of type '" "Cert *""'"); 
  }
  arg6 = reinterpret_cast< Cert * >(argp6);
  ecode7 = SWIG_AsVal_bool(obj3, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Signature_sign_data" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->sign_data(arg2,arg3,arg4,arg5,arg6,arg7);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg4) {
    if (*arg5 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res4 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg4), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res4 = PyBytes_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#else
      res4 = PyString_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res4);
    free(*arg4);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Signature_sign_data__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Signature *arg1 = (Signature *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  BYTE **arg4 = (BYTE **) 0 ;
  DWORD *arg5 = (DWORD *) 0 ;
  Cert *arg6 = (Cert *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  BYTE *carray4 = 0 ;
  DWORD size4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *res4 = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  arg4 = &carray4;
  arg5 = &size4;
  if (!PyArg_ParseTuple(args,(char *)"OO:Signature_sign_data",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Signature_sign_data" "', argument " "1"" of type '" "Signature *""'"); 
  }
  arg1 = reinterpret_cast< Signature * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Signature_sign_data" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  res6 = SWIG_ConvertPtr(obj2, &argp6,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Signature_sign_data" "', argument " "6"" of type '" "Cert *""'"); 
  }
  arg6 = reinterpret_cast< Cert * >(argp6);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->sign_data(arg2,arg3,arg4,arg5,arg6);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg4) {
    if (*arg5 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res4 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg4), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res4 = PyBytes_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#else
      res4 = PyString_FromStringAndSize((char *)*arg4, static_cast< int >(*arg5));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res4);
    free(*arg4);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Signature_sign_data(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Cert, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Signature_sign_data__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Signature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Cert, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Signature_sign_data__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Signature_sign_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Signature::sign_data(BYTE *,DWORD,BYTE **,DWORD *,Cert *,bool)\n"
    "    Signature::sign_data(BYTE *,DWORD,BYTE **,DWORD *,Cert *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Signature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Signature *arg1 = (Signature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Signature takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Signature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Signature" "', argument " "1"" of type '" "Signature *""'"); 
  }
  arg1 = reinterpret_cast< Signature * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Signature) /* defines _wrap_delete_Signature_destructor_closure */

SWIGINTERN int _wrap_new_CertRequest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  CertRequest *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CertRequest",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CertRequest" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (CertRequest *)new CertRequest(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CertRequest, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_CertRequest_set_subject(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertRequest *arg1 = (CertRequest *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertRequest_set_subject",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertRequest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertRequest_set_subject" "', argument " "1"" of type '" "CertRequest *""'"); 
  }
  arg1 = reinterpret_cast< CertRequest * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CertRequest_set_subject" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->set_subject(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertRequest_get_data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertRequest *arg1 = (CertRequest *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CertRequest_get_data takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertRequest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertRequest_get_data" "', argument " "1"" of type '" "CertRequest *""'"); 
  }
  arg1 = reinterpret_cast< CertRequest * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->get_data(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CertRequest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertRequest *arg1 = (CertRequest *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CertRequest takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertRequest, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CertRequest" "', argument " "1"" of type '" "CertRequest *""'"); 
  }
  arg1 = reinterpret_cast< CertRequest * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertRequest_add_attribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertRequest *arg1 = (CertRequest *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CertRequest_add_attribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertRequest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertRequest_add_attribute" "', argument " "1"" of type '" "CertRequest *""'"); 
  }
  arg1 = reinterpret_cast< CertRequest * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CertRequest_add_attribute" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (int)(arg1)->add_attribute(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CertRequest_add_attribute_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  CertRequest *arg1 = (CertRequest *) 0 ;
  int arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  DWORD arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *cstr3 = NULL ;
  Py_ssize_t len3 = 0 ;
  int res3 = 1 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CertRequest_add_attribute_value",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CertRequest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CertRequest_add_attribute_value" "', argument " "1"" of type '" "CertRequest *""'"); 
  }
  arg1 = reinterpret_cast< CertRequest * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CertRequest_add_attribute_value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj2))
#else  
  if (PyString_Check(obj2))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res3 = PyBytes_AsStringAndSize(obj2, &cstr3, &len3);
#else
    res3 = PyString_AsStringAndSize(obj2, &cstr3, &len3);
#endif
    if (!cstr3) {
      res3 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj2);*/
    /*%#endif*/
  } 
  
  if(res3){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CertRequest_add_attribute_value" "', argument " "3"" of type '" "BYTE *""'");
  } else {
    arg3 = (BYTE *) cstr3;
    arg4 = (DWORD) len3;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->add_attribute_value(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CertRequest) /* defines _wrap_delete_CertRequest_destructor_closure */

SWIGINTERN int _wrap_new_Hash__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  Key *arg4 = (Key *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Hash",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj2))
#else  
  if (PyString_Check(obj2))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj2, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj2, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj2);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Hash" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Hash" "', argument " "4"" of type '" "Key *""'"); 
  }
  arg4 = reinterpret_cast< Key * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Hash" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1,arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  Key *arg4 = (Key *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Hash",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj2))
#else  
  if (PyString_Check(obj2))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj2, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj2, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj2);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Hash" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Hash" "', argument " "4"" of type '" "Key *""'"); 
  }
  arg4 = reinterpret_cast< Key * >(argp4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1,arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Hash",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj2))
#else  
  if (PyString_Check(obj2))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj2, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj2, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj2);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Hash" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Hash" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1,arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Hash",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj2))
#else  
  if (PyString_Check(obj2))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj2, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj2, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj2);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_Hash" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash__SWIG_4(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  Key *arg2 = (Key *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Hash",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  res2 = SWIG_ConvertPtr(obj2, &argp2,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Hash" "', argument " "2"" of type '" "Key *""'"); 
  }
  arg2 = reinterpret_cast< Key * >(argp2);
  ecode3 = SWIG_AsVal_int(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Hash" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash__SWIG_5(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  Key *arg2 = (Key *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Hash",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  res2 = SWIG_ConvertPtr(obj2, &argp2,SWIGTYPE_p_Key, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Hash" "', argument " "2"" of type '" "Key *""'"); 
  }
  arg2 = reinterpret_cast< Key * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash__SWIG_6(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Hash",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hash" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash__SWIG_7(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Crypt *arg1 = (Crypt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Hash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Hash",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_Crypt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hash" "', argument " "1"" of type '" "Crypt *""'"); 
  }
  arg1 = reinterpret_cast< Crypt * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Hash *)new Hash(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Hash, SWIG_BUILTIN_INIT |  0 );
  result->ref();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hash(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Hash__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Key, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Hash__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Hash__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_Hash__SWIG_3(self, args);
        }
        return _wrap_new_Hash__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Key, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Hash__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Key, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Hash__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Hash__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Crypt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if py_version_hex>=0x03000000
        _v = PyBytes_Check(argv[1]) ? 1 : 0;
#else  
        _v = PyString_Check(argv[1]) ? 1 : 0;
#endif
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Key, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Hash__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Hash'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Hash::Hash(Crypt *,BYTE *,DWORD,Key *,int)\n"
    "    Hash::Hash(Crypt *,BYTE *,DWORD,Key *)\n"
    "    Hash::Hash(Crypt *,BYTE *,DWORD,int)\n"
    "    Hash::Hash(Crypt *,BYTE *,DWORD)\n"
    "    Hash::Hash(Crypt *,Key *,int)\n"
    "    Hash::Hash(Crypt *,Key *)\n"
    "    Hash::Hash(Crypt *,int)\n"
    "    Hash::Hash(Crypt *)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Hash(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Hash *arg1 = (Hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Hash takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Hash, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hash" "', argument " "1"" of type '" "Hash *""'"); 
  }
  arg1 = reinterpret_cast< Hash * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    arg1->unref();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hash_digest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Hash *arg1 = (Hash *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Hash_digest takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hash_digest" "', argument " "1"" of type '" "Hash *""'"); 
  }
  arg1 = reinterpret_cast< Hash * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->digest(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hash_update(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Hash *arg1 = (Hash *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *cstr2 = NULL ;
  Py_ssize_t len2 = 0 ;
  int res2 = 1 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hash_update",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hash_update" "', argument " "1"" of type '" "Hash *""'"); 
  }
  arg1 = reinterpret_cast< Hash * >(argp1);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj1))
#else  
  if (PyString_Check(obj1))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res2 = PyBytes_AsStringAndSize(obj1, &cstr2, &len2);
#else
    res2 = PyString_AsStringAndSize(obj1, &cstr2, &len2);
#endif
    if (!cstr2) {
      res2 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj1);*/
    /*%#endif*/
  } 
  
  if(res2){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Hash_update" "', argument " "2"" of type '" "BYTE *""'");
  } else {
    arg2 = (BYTE *) cstr2;
    arg3 = (DWORD) len2;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->update(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hash_sign__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Hash *arg1 = (Hash *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  DWORD arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  PyObject * obj1 = 0 ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (!PyArg_ParseTuple(args,(char *)"O:Hash_sign",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hash_sign" "', argument " "1"" of type '" "Hash *""'"); 
  }
  arg1 = reinterpret_cast< Hash * >(argp1);
#if PY_VERSION_HEX >= 0x03000000
  arg4 = PyLong_AsUnsignedLong(obj1);
#else
  arg4 = PyInt_AsUnsignedLongMask(obj1);
#endif
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->sign(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hash_sign__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Hash *arg1 = (Hash *) 0 ;
  BYTE **arg2 = (BYTE **) 0 ;
  DWORD *arg3 = (DWORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *carray2 = 0 ;
  DWORD size2 = 0 ;
  PyObject *res2 = NULL ;
  
  arg2 = &carray2;
  arg3 = &size2;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Hash_sign takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hash_sign" "', argument " "1"" of type '" "Hash *""'"); 
  }
  arg1 = reinterpret_cast< Hash * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      (arg1)->sign(arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_Py_Void();
  if (*arg2) {
    if (*arg3 > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      res2 = pchar_descriptor ? 
      SWIG_InternalNewPointerObj(const_cast< BYTE * >(*arg2), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      res2 = PyBytes_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#else
      res2 = PyString_FromStringAndSize((char *)*arg2, static_cast< int >(*arg3));
#endif
    }
    resultobj = SWIG_Python_AppendOutput(resultobj, res2);
    free(*arg2);
  } else {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_Py_Void());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hash_sign(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Hash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Hash_sign__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Hash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
#if PY_VERSION_HEX >= 0x03000000
        _v = PyLong_Check(argv[1]) ? 1 : 0;
#else
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
#endif
      }
      if (_v) {
        return _wrap_Hash_sign__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hash_sign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Hash::sign(BYTE **,DWORD *,DWORD)\n"
    "    Hash::sign(BYTE **,DWORD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hash_verify(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Hash *arg1 = (Hash *) 0 ;
  Cert *arg2 = (Cert *) 0 ;
  BYTE *arg3 = (BYTE *) 0 ;
  DWORD arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char *cstr3 = NULL ;
  Py_ssize_t len3 = 0 ;
  int res3 = 1 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hash_verify",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hash_verify" "', argument " "1"" of type '" "Hash *""'"); 
  }
  arg1 = reinterpret_cast< Hash * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cert, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hash_verify" "', argument " "2"" of type '" "Cert *""'"); 
  }
  arg2 = reinterpret_cast< Cert * >(argp2);
#if py_version_hex>=0x03000000
  if (PyBytes_Check(obj2))
#else  
  if (PyString_Check(obj2))
#endif
  {
#if PY_VERSION_HEX>=0x03000000
    res3 = PyBytes_AsStringAndSize(obj2, &cstr3, &len3);
#else
    res3 = PyString_AsStringAndSize(obj2, &cstr3, &len3);
#endif
    if (!cstr3) {
      res3 = 1;
    }
    /*%#if PY_VERSION_HEX>=0x03000000*/
    /*Py_XDECREF(obj2);*/
    /*%#endif*/
  } 
  
  if(res3){
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Hash_verify" "', argument " "3"" of type '" "BYTE *""'");
  } else {
    arg3 = (BYTE *) cstr3;
    arg4 = (DWORD) len3;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (bool)(arg1)->verify(arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hash_derive_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Hash *arg1 = (Hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Key *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Hash_derive_key takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hash_derive_key" "', argument " "1"" of type '" "Hash *""'"); 
  }
  arg1 = reinterpret_cast< Hash * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Key *)(arg1)->derive_key();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(CSPException &_e) {
    PyErr_SetString(PyExc_SystemError, (&_e)->msg);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Key, SWIG_POINTER_OWN |  0 );
  result->ref();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Hash) /* defines _wrap_delete_Hash_destructor_closure */

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"Crypt_remove", _wrap_Crypt_remove, METH_VARARGS, (char *)"\n"
		"Crypt_remove(STRING, type, name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"type: DWORD\n"
		"name: char *\n"
		"\n"
		""},
	 { (char *)"Crypt_enumerate", _wrap_Crypt_enumerate, METH_VARARGS, (char *)"Crypt_enumerate() -> CryptIter"},
	 { (char *)"Cert_self_sign", _wrap_Cert_self_sign, METH_VARARGS, (char *)"\n"
		"Cert_self_sign(ctx, STRING) -> Cert\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ctx: Crypt *\n"
		"STRING: BYTE *\n"
		"\n"
		""},
	 { NULL, NULL, 0, NULL }
};

static SwigPyGetSet GUID___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet GUID_Data1_getset = { _wrap_GUID_Data1_get, _wrap_GUID_Data1_set };
static SwigPyGetSet GUID_Data2_getset = { _wrap_GUID_Data2_get, _wrap_GUID_Data2_set };
static SwigPyGetSet GUID_Data3_getset = { _wrap_GUID_Data3_get, _wrap_GUID_Data3_set };
static SwigPyGetSet GUID_Data4_getset = { _wrap_GUID_Data4_get, _wrap_GUID_Data4_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___GUID_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_GUID.__dict__", (void *) &GUID___dict___getset }
,
    { (char *) "Data1", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_GUID.Data1", (void *) &GUID_Data1_getset }
,
    { (char *) "Data2", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_GUID.Data2", (void *) &GUID_Data2_getset }
,
    { (char *) "Data3", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_GUID.Data3", (void *) &GUID_Data3_getset }
,
    { (char *) "Data4", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_GUID.Data4", (void *) &GUID_Data4_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___GUID_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___GUID_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___GUID_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.GUID",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_GUID_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___GUID_type.as_number,     /* tp_as_number */
    &SwigPyBuiltin___GUID_type.as_sequence,   /* tp_as_sequence */
    &SwigPyBuiltin___GUID_type.as_mapping,    /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___GUID_type.as_buffer,     /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_GUID",                                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___GUID_richcompare,               /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___GUID_methods,             /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___GUID_getset,              /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_GUID,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___GUID_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___GUID_type};

static SwigPyGetSet LARGE_INTEGER___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet LARGE_INTEGER_LowPart_getset = { _wrap_LARGE_INTEGER_LowPart_get, _wrap_LARGE_INTEGER_LowPart_set };
static SwigPyGetSet LARGE_INTEGER_HighPart_getset = { _wrap_LARGE_INTEGER_HighPart_get, _wrap_LARGE_INTEGER_HighPart_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___LARGE_INTEGER_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_LARGE_INTEGER.__dict__", (void *) &LARGE_INTEGER___dict___getset }
,
    { (char *) "LowPart", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_LARGE_INTEGER.LowPart", (void *) &LARGE_INTEGER_LowPart_getset }
,
    { (char *) "HighPart", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_LARGE_INTEGER.HighPart", (void *) &LARGE_INTEGER_HighPart_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___LARGE_INTEGER_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___LARGE_INTEGER_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___LARGE_INTEGER_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.LARGE_INTEGER",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_LARGE_INTEGER_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___LARGE_INTEGER_type.as_number,                /* tp_as_number */
    &SwigPyBuiltin___LARGE_INTEGER_type.as_sequence,              /* tp_as_sequence */
    &SwigPyBuiltin___LARGE_INTEGER_type.as_mapping,               /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___LARGE_INTEGER_type.as_buffer,                /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_LARGE_INTEGER",                       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___LARGE_INTEGER_richcompare,      /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___LARGE_INTEGER_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___LARGE_INTEGER_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_LARGE_INTEGER,       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___LARGE_INTEGER_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___LARGE_INTEGER_type};

static SwigPyGetSet LUID___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet LUID_LowPart_getset = { _wrap_LUID_LowPart_get, _wrap_LUID_LowPart_set };
static SwigPyGetSet LUID_HighPart_getset = { _wrap_LUID_HighPart_get, _wrap_LUID_HighPart_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___LUID_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_LUID.__dict__", (void *) &LUID___dict___getset }
,
    { (char *) "LowPart", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_LUID.LowPart", (void *) &LUID_LowPart_getset }
,
    { (char *) "HighPart", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_LUID.HighPart", (void *) &LUID_HighPart_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___LUID_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___LUID_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___LUID_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.LUID",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_LUID_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___LUID_type.as_number,     /* tp_as_number */
    &SwigPyBuiltin___LUID_type.as_sequence,   /* tp_as_sequence */
    &SwigPyBuiltin___LUID_type.as_mapping,    /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___LUID_type.as_buffer,     /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_LUID",                                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___LUID_richcompare,               /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___LUID_methods,             /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___LUID_getset,              /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_LUID,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___LUID_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___LUID_type};

static SwigPyGetSet RCObj___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__RCObj_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"RCObj.__dict__", (void *) &RCObj___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__RCObj_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__RCObj_methods[] = {
  { "ref", (PyCFunction) _wrap_RCObj_ref, METH_VARARGS, (char *) "ref() -> int" },
  { "unref", (PyCFunction) _wrap_RCObj_unref, METH_VARARGS, (char *) "unref() -> int" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__RCObj_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.RCObj",                              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_RCObj_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__RCObj_type.as_number,     /* tp_as_number */
    &SwigPyBuiltin__RCObj_type.as_sequence,   /* tp_as_sequence */
    &SwigPyBuiltin__RCObj_type.as_mapping,    /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__RCObj_type.as_buffer,     /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::RCObj",                                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__RCObj_richcompare,               /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__RCObj_methods,             /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__RCObj_getset,              /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_RCObj,               /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__RCObj_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__RCObj_type};

static SwigPyGetSet CRYPTOAPI_BLOB___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CRYPTOAPI_BLOB_pbData_getset = { _wrap_CRYPTOAPI_BLOB_pbData_get, _wrap_CRYPTOAPI_BLOB_pbData_set };
static SwigPyGetSet CRYPTOAPI_BLOB_cbData_getset = { _wrap_CRYPTOAPI_BLOB_cbData_get, _wrap_CRYPTOAPI_BLOB_cbData_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___CRYPTOAPI_BLOB_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_CRYPTOAPI_BLOB.__dict__", (void *) &CRYPTOAPI_BLOB___dict___getset }
,
    { (char *) "pbData", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CRYPTOAPI_BLOB.pbData", (void *) &CRYPTOAPI_BLOB_pbData_getset }
,
    { (char *) "cbData", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CRYPTOAPI_BLOB.cbData", (void *) &CRYPTOAPI_BLOB_cbData_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___CRYPTOAPI_BLOB_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___CRYPTOAPI_BLOB_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___CRYPTOAPI_BLOB_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CRYPTOAPI_BLOB",                     /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CRYPTOAPI_BLOB_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___CRYPTOAPI_BLOB_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin___CRYPTOAPI_BLOB_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin___CRYPTOAPI_BLOB_type.as_mapping,              /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___CRYPTOAPI_BLOB_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_CRYPTOAPI_BLOB",                      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___CRYPTOAPI_BLOB_richcompare,     /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___CRYPTOAPI_BLOB_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___CRYPTOAPI_BLOB_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CRYPTOAPI_BLOB,      /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___CRYPTOAPI_BLOB_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___CRYPTOAPI_BLOB_type};

static SwigPyGetSet CMS_DH_KEY_INFO_PubInfo_getset = { _wrap_CMS_DH_KEY_INFO_PubInfo_get, _wrap_CMS_DH_KEY_INFO_PubInfo_set };
static SwigPyGetSet CMS_DH_KEY_INFO_pReserved_getset = { _wrap_CMS_DH_KEY_INFO_pReserved_get, _wrap_CMS_DH_KEY_INFO_pReserved_set };
static SwigPyGetSet CMS_DH_KEY_INFO___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CMS_DH_KEY_INFO_dwVersion_getset = { _wrap_CMS_DH_KEY_INFO_dwVersion_get, _wrap_CMS_DH_KEY_INFO_dwVersion_set };
static SwigPyGetSet CMS_DH_KEY_INFO_Algid_getset = { _wrap_CMS_DH_KEY_INFO_Algid_get, _wrap_CMS_DH_KEY_INFO_Algid_set };
static SwigPyGetSet CMS_DH_KEY_INFO_pszContentEncObjId_getset = { _wrap_CMS_DH_KEY_INFO_pszContentEncObjId_get, _wrap_CMS_DH_KEY_INFO_pszContentEncObjId_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___CMS_DH_KEY_INFO_getset[] = {
    { (char *) "PubInfo", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CMS_DH_KEY_INFO.PubInfo", (void *) &CMS_DH_KEY_INFO_PubInfo_getset }
,
    { (char *) "pReserved", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CMS_DH_KEY_INFO.pReserved", (void *) &CMS_DH_KEY_INFO_pReserved_getset }
,
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_CMS_DH_KEY_INFO.__dict__", (void *) &CMS_DH_KEY_INFO___dict___getset }
,
    { (char *) "dwVersion", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CMS_DH_KEY_INFO.dwVersion", (void *) &CMS_DH_KEY_INFO_dwVersion_getset }
,
    { (char *) "Algid", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CMS_DH_KEY_INFO.Algid", (void *) &CMS_DH_KEY_INFO_Algid_getset }
,
    { (char *) "pszContentEncObjId", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CMS_DH_KEY_INFO.pszContentEncObjId", (void *) &CMS_DH_KEY_INFO_pszContentEncObjId_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___CMS_DH_KEY_INFO_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___CMS_DH_KEY_INFO_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___CMS_DH_KEY_INFO_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CMS_DH_KEY_INFO",                    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CMS_DH_KEY_INFO_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___CMS_DH_KEY_INFO_type.as_number,              /* tp_as_number */
    &SwigPyBuiltin___CMS_DH_KEY_INFO_type.as_sequence,            /* tp_as_sequence */
    &SwigPyBuiltin___CMS_DH_KEY_INFO_type.as_mapping,             /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___CMS_DH_KEY_INFO_type.as_buffer,              /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_CMS_DH_KEY_INFO",                     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___CMS_DH_KEY_INFO_richcompare,    /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___CMS_DH_KEY_INFO_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___CMS_DH_KEY_INFO_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CMS_DH_KEY_INFO,     /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___CMS_DH_KEY_INFO_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___CMS_DH_KEY_INFO_type};

static SwigPyGetSet CRYPT_BIT_BLOB___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CRYPT_BIT_BLOB_pbData_getset = { _wrap_CRYPT_BIT_BLOB_pbData_get, _wrap_CRYPT_BIT_BLOB_pbData_set };
static SwigPyGetSet CRYPT_BIT_BLOB_cbData_getset = { _wrap_CRYPT_BIT_BLOB_cbData_get, _wrap_CRYPT_BIT_BLOB_cbData_set };
static SwigPyGetSet CRYPT_BIT_BLOB_cUnusedBits_getset = { _wrap_CRYPT_BIT_BLOB_cUnusedBits_get, _wrap_CRYPT_BIT_BLOB_cUnusedBits_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___CRYPT_BIT_BLOB_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_CRYPT_BIT_BLOB.__dict__", (void *) &CRYPT_BIT_BLOB___dict___getset }
,
    { (char *) "pbData", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CRYPT_BIT_BLOB.pbData", (void *) &CRYPT_BIT_BLOB_pbData_getset }
,
    { (char *) "cbData", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CRYPT_BIT_BLOB.cbData", (void *) &CRYPT_BIT_BLOB_cbData_getset }
,
    { (char *) "cUnusedBits", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CRYPT_BIT_BLOB.cUnusedBits", (void *) &CRYPT_BIT_BLOB_cUnusedBits_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___CRYPT_BIT_BLOB_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___CRYPT_BIT_BLOB_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___CRYPT_BIT_BLOB_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CRYPT_BIT_BLOB",                     /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CRYPT_BIT_BLOB_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___CRYPT_BIT_BLOB_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin___CRYPT_BIT_BLOB_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin___CRYPT_BIT_BLOB_type.as_mapping,              /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___CRYPT_BIT_BLOB_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_CRYPT_BIT_BLOB",                      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___CRYPT_BIT_BLOB_richcompare,     /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___CRYPT_BIT_BLOB_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___CRYPT_BIT_BLOB_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CRYPT_BIT_BLOB,      /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___CRYPT_BIT_BLOB_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___CRYPT_BIT_BLOB_type};

static SwigPyGetSet CRYPT_ALGORITHM_IDENTIFIER___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CRYPT_ALGORITHM_IDENTIFIER_Parameters_getset = { _wrap_CRYPT_ALGORITHM_IDENTIFIER_Parameters_get, _wrap_CRYPT_ALGORITHM_IDENTIFIER_Parameters_set };
static SwigPyGetSet CRYPT_ALGORITHM_IDENTIFIER_pszObjId_getset = { _wrap_CRYPT_ALGORITHM_IDENTIFIER_pszObjId_get, _wrap_CRYPT_ALGORITHM_IDENTIFIER_pszObjId_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_CRYPT_ALGORITHM_IDENTIFIER.__dict__", (void *) &CRYPT_ALGORITHM_IDENTIFIER___dict___getset }
,
    { (char *) "Parameters", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CRYPT_ALGORITHM_IDENTIFIER.Parameters", (void *) &CRYPT_ALGORITHM_IDENTIFIER_Parameters_getset }
,
    { (char *) "pszObjId", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CRYPT_ALGORITHM_IDENTIFIER.pszObjId", (void *) &CRYPT_ALGORITHM_IDENTIFIER_pszObjId_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CRYPT_ALGORITHM_IDENTIFIER",         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CRYPT_ALGORITHM_IDENTIFIER_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_type.as_number,   /* tp_as_number */
    &SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_type.as_mapping,  /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_type.as_buffer,   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_CRYPT_ALGORITHM_IDENTIFIER",          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_methods,           /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_getset,            /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CRYPT_ALGORITHM_IDENTIFIER,              /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_type};

static SwigPyGetSet CryptDesc_name_getset = { _wrap_CryptDesc_name_get, _wrap_CryptDesc_name_set };
static SwigPyGetSet CryptDesc___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CryptDesc_type_getset = { _wrap_CryptDesc_type_get, _wrap_CryptDesc_type_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CryptDesc_getset[] = {
    { (char *) "name", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CryptDesc.name", (void *) &CryptDesc_name_getset }
,
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CryptDesc.__dict__", (void *) &CryptDesc___dict___getset }
,
    { (char *) "type", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CryptDesc.type", (void *) &CryptDesc_type_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CryptDesc_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CryptDesc_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CryptDesc_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CryptDesc",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CryptDesc_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CryptDesc_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__CryptDesc_type.as_sequence,                   /* tp_as_sequence */
    &SwigPyBuiltin__CryptDesc_type.as_mapping,/* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CryptDesc_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CryptDesc",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CryptDesc_richcompare,           /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__CryptDesc_methods,         /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CryptDesc_getset,          /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CryptDesc,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CryptDesc_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CryptDesc_type};

static SwigPyGetSet CryptIter___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CryptIter_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CryptIter.__dict__", (void *) &CryptIter___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CryptIter_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CryptIter_methods[] = {
  { "__iter__", (PyCFunction) _wrap_CryptIter___iter__, METH_VARARGS, (char *) "__iter__() -> CryptIter" },
  { "next", (PyCFunction) _wrap_CryptIter_next, METH_VARARGS, (char *) "next() -> CryptDesc" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CryptIter_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CryptIter",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CryptIter_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CryptIter_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__CryptIter_type.as_sequence,                   /* tp_as_sequence */
    &SwigPyBuiltin__CryptIter_type.as_mapping,/* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CryptIter_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CryptIter",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CryptIter_richcompare,           /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_CryptIter___iter___getiterfunc_closure,/* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_CryptIter_next_iternextfunc_closure,/* tp_iternext */
    SwigPyBuiltin__CryptIter_methods,         /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CryptIter_getset,          /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CryptIter,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CryptIter_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CryptIter_type};

static SwigPyGetSet Crypt___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet Crypt_parent_getset = { _wrap_Crypt_parent_get, _wrap_Crypt_parent_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Crypt_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"Crypt.__dict__", (void *) &Crypt___dict___getset }
,
    { (char *) "parent", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"Crypt.parent", (void *) &Crypt_parent_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Crypt_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Crypt_methods[] = {
  { "name", (PyCFunction) _wrap_Crypt_name, METH_VARARGS, (char *) "name() -> char *" },
  { "uniq_name", (PyCFunction) _wrap_Crypt_uniq_name, METH_VARARGS, (char *) "uniq_name() -> char *" },
  { "prov_name", (PyCFunction) _wrap_Crypt_prov_name, METH_VARARGS, (char *) "prov_name() -> char *" },
  { "prov_type", (PyCFunction) _wrap_Crypt_prov_type, METH_VARARGS, (char *) "prov_type() -> DWORD" },
  { "create_key", (PyCFunction) _wrap_Crypt_create_key, METH_VARARGS, (char *) "\n"
		"create_key(flags, keyspec=1) -> Key\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"flags: DWORD\n"
		"keyspec: DWORD\n"
		"\n"
		"create_key(flags) -> Key\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"flags: DWORD\n"
		"\n"
		"" },
  { "get_key", (PyCFunction) _wrap_Crypt_get_key, METH_VARARGS, (char *) "\n"
		"get_key(keyspec=1) -> Key\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"keyspec: DWORD\n"
		"\n"
		"get_key() -> Key\n"
		"" },
  { "import_key", (PyCFunction) _wrap_Crypt_import_key, METH_VARARGS, (char *) "\n"
		"import_key(STRING, decrypt=None) -> Key\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"decrypt: Key *\n"
		"\n"
		"import_key(STRING) -> Key\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "set_password", (PyCFunction) _wrap_Crypt_set_password, METH_VARARGS, (char *) "\n"
		"set_password(pin, keyspec=1)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pin: char *\n"
		"keyspec: DWORD\n"
		"\n"
		"set_password(pin)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pin: char *\n"
		"\n"
		"" },
  { "change_password", (PyCFunction) _wrap_Crypt_change_password, METH_VARARGS, (char *) "\n"
		"change_password(pin)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pin: char *\n"
		"\n"
		"" },
  { "public_key", (PyCFunction) _wrap_Crypt_public_key, METH_VARARGS, (char *) "\n"
		"public_key(keyspec=1)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"keyspec: DWORD\n"
		"\n"
		"public_key()\n"
		"" },
  { "import_public_key_info", (PyCFunction) _wrap_Crypt_import_public_key_info, METH_VARARGS, (char *) "\n"
		"import_public_key_info(pcert) -> Key\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pcert: Cert *\n"
		"\n"
		"" },
  { "remove", (PyCFunction) _wrap_Crypt_remove, METH_STATIC|METH_VARARGS, (char *) "\n"
		"remove(STRING, type, name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"type: DWORD\n"
		"name: char *\n"
		"\n"
		"" },
  { "enumerate", (PyCFunction) _wrap_Crypt_enumerate, METH_STATIC|METH_VARARGS, (char *) "enumerate() -> CryptIter" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Crypt_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.Crypt",                              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_Crypt_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Crypt_type.as_number,     /* tp_as_number */
    &SwigPyBuiltin__Crypt_type.as_sequence,   /* tp_as_sequence */
    &SwigPyBuiltin__Crypt_type.as_mapping,    /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Crypt_type.as_buffer,     /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::Crypt",                                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__Crypt_richcompare,               /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Crypt_methods,             /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Crypt_getset,              /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_Crypt,               /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Crypt_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Crypt_type};

static SwigPyGetSet Key___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Key_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"Key.__dict__", (void *) &Key___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Key_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Key_methods[] = {
  { "encode", (PyCFunction) _wrap_Key_encode, METH_VARARGS, (char *) "\n"
		"encode(cryptkey=None)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cryptkey: Key *\n"
		"\n"
		"encode()\n"
		"" },
  { "store_cert", (PyCFunction) _wrap_Key_store_cert, METH_VARARGS, (char *) "\n"
		"store_cert(c)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"c: Cert *\n"
		"\n"
		"" },
  { "extract_cert", (PyCFunction) _wrap_Key_extract_cert, METH_VARARGS, (char *) "extract_cert()" },
  { "encrypt", (PyCFunction) _wrap_Key_encrypt, METH_VARARGS, (char *) "\n"
		"encrypt(STRING)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "decrypt", (PyCFunction) _wrap_Key_decrypt, METH_VARARGS, (char *) "\n"
		"decrypt(STRING)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "alg_id", (PyCFunction) _wrap_Key_alg_id, METH_VARARGS, (char *) "alg_id() -> ALG_ID" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Key_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.Key",                                /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_Key_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Key_type.as_number,       /* tp_as_number */
    &SwigPyBuiltin__Key_type.as_sequence,     /* tp_as_sequence */
    &SwigPyBuiltin__Key_type.as_mapping,      /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Key_type.as_buffer,       /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::Key",                                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__Key_richcompare,                 /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Key_methods,               /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Key_getset,                /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_Key,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Key_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Key_type};

static SwigPyGetSet Cert___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Cert_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"Cert.__dict__", (void *) &Cert___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Cert_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Cert_methods[] = {
  { "duplicate", (PyCFunction) _wrap_Cert_duplicate, METH_VARARGS, (char *) "duplicate() -> Cert" },
  { "remove_from_store", (PyCFunction) _wrap_Cert_remove_from_store, METH_VARARGS, (char *) "remove_from_store()" },
  { "self_sign", (PyCFunction) _wrap_Cert_self_sign, METH_STATIC|METH_VARARGS, (char *) "\n"
		"self_sign(ctx, STRING) -> Cert\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ctx: Crypt *\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "extract", (PyCFunction) _wrap_Cert_extract, METH_VARARGS, (char *) "extract()" },
  { "thumbprint", (PyCFunction) _wrap_Cert_thumbprint, METH_VARARGS, (char *) "thumbprint()" },
  { "subject_id", (PyCFunction) _wrap_Cert_subject_id, METH_VARARGS, (char *) "subject_id()" },
  { "bind", (PyCFunction) _wrap_Cert_bind, METH_VARARGS, (char *) "\n"
		"bind(ctx, keyspec=1)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ctx: Crypt *\n"
		"keyspec: DWORD\n"
		"\n"
		"bind(ctx)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ctx: Crypt *\n"
		"\n"
		"" },
  { "set_pin", (PyCFunction) _wrap_Cert_set_pin, METH_VARARGS, (char *) "\n"
		"set_pin(pin)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pin: char *\n"
		"\n"
		"" },
  { "eku", (PyCFunction) _wrap_Cert_eku, METH_VARARGS, (char *) "eku() -> EKUIter" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Cert_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.Cert",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_Cert_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Cert_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__Cert_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__Cert_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Cert_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::Cert",                                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__Cert_richcompare,                /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_Cert_eku_getiterfunc_closure,/* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Cert_methods,              /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Cert_getset,               /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_Cert,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Cert_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Cert_type};

static SwigPyGetSet CertIter_iter_getset = { _wrap_CertIter_iter_get, _wrap_CertIter_iter_set };
static SwigPyGetSet CertIter___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CertIter_parent_getset = { _wrap_CertIter_parent_get, _wrap_CertIter_parent_set };
static SwigPyGetSet CertIter_pcert_getset = { _wrap_CertIter_pcert_get, _wrap_CertIter_pcert_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CertIter_getset[] = {
    { (char *) "iter", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CertIter.iter", (void *) &CertIter_iter_getset }
,
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CertIter.__dict__", (void *) &CertIter___dict___getset }
,
    { (char *) "parent", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CertIter.parent", (void *) &CertIter_parent_getset }
,
    { (char *) "pcert", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CertIter.pcert", (void *) &CertIter_pcert_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CertIter_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CertIter_methods[] = {
  { "__iter__", (PyCFunction) _wrap_CertIter___iter__, METH_VARARGS, (char *) "__iter__() -> CertIter" },
  { "next", (PyCFunction) _wrap_CertIter_next, METH_VARARGS, (char *) "next() -> Cert" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CertIter_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CertIter",                           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CertIter_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CertIter_type.as_number,  /* tp_as_number */
    &SwigPyBuiltin__CertIter_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__CertIter_type.as_mapping, /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CertIter_type.as_buffer,  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CertIter",                             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CertIter_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_CertIter___iter___getiterfunc_closure,/* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_CertIter_next_iternextfunc_closure,/* tp_iternext */
    SwigPyBuiltin__CertIter_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CertIter_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CertIter,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CertIter_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CertIter_type};

static SwigPyGetSet CertFind_enctype_getset = { _wrap_CertFind_enctype_get, _wrap_CertFind_enctype_set };
static SwigPyGetSet CertFind___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CertFind_param_getset = { _wrap_CertFind_param_get, _wrap_CertFind_param_set };
static SwigPyGetSet CertFind_chb_getset = { _wrap_CertFind_chb_get, _wrap_CertFind_chb_set };
static SwigPyGetSet CertFind_findtype_getset = { _wrap_CertFind_findtype_get, _wrap_CertFind_findtype_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CertFind_getset[] = {
    { (char *) "enctype", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CertFind.enctype", (void *) &CertFind_enctype_getset }
,
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CertFind.__dict__", (void *) &CertFind___dict___getset }
,
    { (char *) "param", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CertFind.param", (void *) &CertFind_param_getset }
,
    { (char *) "chb", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CertFind.chb", (void *) &CertFind_chb_getset }
,
    { (char *) "findtype", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"CertFind.findtype", (void *) &CertFind_findtype_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CertFind_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CertFind_methods[] = {
  { "next", (PyCFunction) _wrap_CertFind_next, METH_VARARGS, (char *) "next() -> Cert" },
  { "__iter__", (PyCFunction) _wrap_CertFind___iter__, METH_VARARGS, (char *) "__iter__() -> CertFind" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CertFind_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CertFind",                           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CertFind_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CertFind_type.as_number,  /* tp_as_number */
    &SwigPyBuiltin__CertFind_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__CertFind_type.as_mapping, /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CertFind_type.as_buffer,  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CertFind",                             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CertFind_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_CertFind___iter___getiterfunc_closure,/* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_CertFind_next_iternextfunc_closure,/* tp_iternext */
    SwigPyBuiltin__CertFind_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CertFind_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CertFind,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CertFind_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CertFind_type};

static SwigPyGetSet CertStore___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CertStore_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CertStore.__dict__", (void *) &CertStore___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CertStore_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CertStore_methods[] = {
  { "__iter__", (PyCFunction) _wrap_CertStore___iter__, METH_VARARGS, (char *) "__iter__() -> CertIter" },
  { "find_by_thumb", (PyCFunction) _wrap_CertStore_find_by_thumb, METH_VARARGS, (char *) "\n"
		"find_by_thumb(STRING) -> CertFind\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "find_by_name", (PyCFunction) _wrap_CertStore_find_by_name, METH_VARARGS, (char *) "\n"
		"find_by_name(STRING) -> CertFind\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "get_cert_by_info", (PyCFunction) _wrap_CertStore_get_cert_by_info, METH_VARARGS, (char *) "\n"
		"get_cert_by_info(ci) -> Cert\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ci: CertInfo *\n"
		"\n"
		"" },
  { "add_cert", (PyCFunction) _wrap_CertStore_add_cert, METH_VARARGS, (char *) "\n"
		"add_cert(c) -> Cert\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"c: Cert *\n"
		"\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CertStore_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CertStore",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CertStore_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CertStore_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__CertStore_type.as_sequence,                   /* tp_as_sequence */
    &SwigPyBuiltin__CertStore_type.as_mapping,/* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CertStore_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CertStore",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CertStore_richcompare,           /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_CertStore___iter___getiterfunc_closure,/* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__CertStore_methods,         /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CertStore_getset,          /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CertStore,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CertStore_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CertStore_type};

static SwigPyGetSet EKUIter___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__EKUIter_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"EKUIter.__dict__", (void *) &EKUIter___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__EKUIter_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__EKUIter_methods[] = {
  { "__iter__", (PyCFunction) _wrap_EKUIter___iter__, METH_VARARGS, (char *) "__iter__() -> EKUIter" },
  { "next", (PyCFunction) _wrap_EKUIter_next, METH_VARARGS, (char *) "next()" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__EKUIter_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.EKUIter",                            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_EKUIter_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__EKUIter_type.as_number,   /* tp_as_number */
    &SwigPyBuiltin__EKUIter_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__EKUIter_type.as_mapping,  /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__EKUIter_type.as_buffer,   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::EKUIter",                              /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__EKUIter_richcompare,             /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_EKUIter___iter___getiterfunc_closure,/* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_EKUIter_next_iternextfunc_closure,/* tp_iternext */
    SwigPyBuiltin__EKUIter_methods,           /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__EKUIter_getset,            /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_EKUIter,             /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__EKUIter_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__EKUIter_type};

static SwigPyGetSet CertInfo___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CertInfo_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CertInfo.__dict__", (void *) &CertInfo___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CertInfo_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CertInfo_methods[] = {
  { "version", (PyCFunction) _wrap_CertInfo_version, METH_VARARGS, (char *) "version() -> DWORD" },
  { "issuer", (PyCFunction) _wrap_CertInfo_issuer, METH_VARARGS, (char *) "\n"
		"issuer(decode=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"decode: bool\n"
		"\n"
		"issuer()\n"
		"" },
  { "name", (PyCFunction) _wrap_CertInfo_name, METH_VARARGS, (char *) "\n"
		"name(decode=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"decode: bool\n"
		"\n"
		"name()\n"
		"" },
  { "not_before", (PyCFunction) _wrap_CertInfo_not_before, METH_VARARGS, (char *) "not_before()" },
  { "not_after", (PyCFunction) _wrap_CertInfo_not_after, METH_VARARGS, (char *) "not_after()" },
  { "usage", (PyCFunction) _wrap_CertInfo_usage, METH_VARARGS, (char *) "usage() -> BYTE" },
  { "sign_algorithm", (PyCFunction) _wrap_CertInfo_sign_algorithm, METH_VARARGS, (char *) "sign_algorithm() -> char *" },
  { "public_key_algorithm", (PyCFunction) _wrap_CertInfo_public_key_algorithm, METH_VARARGS, (char *) "public_key_algorithm() -> char *" },
  { "serial", (PyCFunction) _wrap_CertInfo_serial, METH_VARARGS, (char *) "serial()" },
  { "extensions", (PyCFunction) _wrap_CertInfo_extensions, METH_VARARGS, (char *) "extensions() -> ExtIter" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CertInfo_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CertInfo",                           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CertInfo_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CertInfo_type.as_number,  /* tp_as_number */
    &SwigPyBuiltin__CertInfo_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__CertInfo_type.as_mapping, /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CertInfo_type.as_buffer,  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CertInfo",                             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CertInfo_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__CertInfo_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CertInfo_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CertInfo,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CertInfo_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CertInfo_type};

static SwigPyGetSet ExtIter___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ExtIter_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"ExtIter.__dict__", (void *) &ExtIter___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ExtIter_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ExtIter_methods[] = {
  { "__iter__", (PyCFunction) _wrap_ExtIter___iter__, METH_VARARGS, (char *) "__iter__() -> ExtIter" },
  { "next", (PyCFunction) _wrap_ExtIter_next, METH_VARARGS, (char *) "next() -> CertExtension" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ExtIter_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.ExtIter",                            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_ExtIter_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ExtIter_type.as_number,   /* tp_as_number */
    &SwigPyBuiltin__ExtIter_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__ExtIter_type.as_mapping,  /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ExtIter_type.as_buffer,   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::ExtIter",                              /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ExtIter_richcompare,             /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_ExtIter___iter___getiterfunc_closure,/* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_ExtIter_next_iternextfunc_closure,/* tp_iternext */
    SwigPyBuiltin__ExtIter_methods,           /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ExtIter_getset,            /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_ExtIter,             /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ExtIter_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ExtIter_type};

static SwigPyGetSet CryptMsg___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CryptMsg_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CryptMsg.__dict__", (void *) &CryptMsg___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CryptMsg_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CryptMsg_methods[] = {
  { "decrypt_by_cert", (PyCFunction) _wrap_CryptMsg_decrypt_by_cert, METH_VARARGS, (char *) "\n"
		"decrypt_by_cert(crt)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"crt: Cert *\n"
		"\n"
		"" },
  { "num_signers", (PyCFunction) _wrap_CryptMsg_num_signers, METH_VARARGS, (char *) "num_signers() -> int" },
  { "get_data", (PyCFunction) _wrap_CryptMsg_get_data, METH_VARARGS, (char *) "get_data()" },
  { "verify_cert", (PyCFunction) _wrap_CryptMsg_verify_cert, METH_VARARGS, (char *) "\n"
		"verify_cert(c) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"c: Cert *\n"
		"\n"
		"" },
  { "get_type", (PyCFunction) _wrap_CryptMsg_get_type, METH_VARARGS, (char *) "get_type() -> DWORD" },
  { "add_recipient", (PyCFunction) _wrap_CryptMsg_add_recipient, METH_VARARGS, (char *) "\n"
		"add_recipient(c)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"c: Cert *\n"
		"\n"
		"" },
  { "encrypt_data", (PyCFunction) _wrap_CryptMsg_encrypt_data, METH_VARARGS, (char *) "\n"
		"encrypt_data(STRING)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "decrypt", (PyCFunction) _wrap_CryptMsg_decrypt, METH_VARARGS, (char *) "\n"
		"decrypt(store)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"store: CertStore *\n"
		"\n"
		"" },
  { "sign_data", (PyCFunction) _wrap_CryptMsg_sign_data, METH_VARARGS, (char *) "\n"
		"sign_data(STRING, signer, detach=False)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"signer: Cert *\n"
		"detach: bool\n"
		"\n"
		"sign_data(STRING, signer)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"signer: Cert *\n"
		"\n"
		"" },
  { "verify", (PyCFunction) _wrap_CryptMsg_verify, METH_VARARGS, (char *) "\n"
		"verify(n) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: DWORD\n"
		"\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CryptMsg_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CryptMsg",                           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CryptMsg_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CryptMsg_type.as_number,  /* tp_as_number */
    &SwigPyBuiltin__CryptMsg_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__CryptMsg_type.as_mapping, /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CryptMsg_type.as_buffer,  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CryptMsg",                             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CryptMsg_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__CryptMsg_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CryptMsg_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CryptMsg,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CryptMsg_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CryptMsg_type};

static SwigPyGetSet CERT_INFO_cExtension_getset = { _wrap_CERT_INFO_cExtension_get, _wrap_CERT_INFO_cExtension_set };
static SwigPyGetSet CERT_INFO_rgExtension_getset = { _wrap_CERT_INFO_rgExtension_get, _wrap_CERT_INFO_rgExtension_set };
static SwigPyGetSet CERT_INFO_Issuer_getset = { _wrap_CERT_INFO_Issuer_get, _wrap_CERT_INFO_Issuer_set };
static SwigPyGetSet CERT_INFO_NotBefore_getset = { _wrap_CERT_INFO_NotBefore_get, _wrap_CERT_INFO_NotBefore_set };
static SwigPyGetSet CERT_INFO_Subject_getset = { _wrap_CERT_INFO_Subject_get, _wrap_CERT_INFO_Subject_set };
static SwigPyGetSet CERT_INFO___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CERT_INFO_dwVersion_getset = { _wrap_CERT_INFO_dwVersion_get, _wrap_CERT_INFO_dwVersion_set };
static SwigPyGetSet CERT_INFO_SerialNumber_getset = { _wrap_CERT_INFO_SerialNumber_get, _wrap_CERT_INFO_SerialNumber_set };
static SwigPyGetSet CERT_INFO_SignatureAlgorithm_getset = { _wrap_CERT_INFO_SignatureAlgorithm_get, _wrap_CERT_INFO_SignatureAlgorithm_set };
static SwigPyGetSet CERT_INFO_NotAfter_getset = { _wrap_CERT_INFO_NotAfter_get, _wrap_CERT_INFO_NotAfter_set };
static SwigPyGetSet CERT_INFO_SubjectPublicKeyInfo_getset = { _wrap_CERT_INFO_SubjectPublicKeyInfo_get, _wrap_CERT_INFO_SubjectPublicKeyInfo_set };
static SwigPyGetSet CERT_INFO_IssuerUniqueId_getset = { _wrap_CERT_INFO_IssuerUniqueId_get, _wrap_CERT_INFO_IssuerUniqueId_set };
static SwigPyGetSet CERT_INFO_SubjectUniqueId_getset = { _wrap_CERT_INFO_SubjectUniqueId_get, _wrap_CERT_INFO_SubjectUniqueId_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin___CERT_INFO_getset[] = {
    { (char *) "cExtension", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.cExtension", (void *) &CERT_INFO_cExtension_getset }
,
    { (char *) "rgExtension", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.rgExtension", (void *) &CERT_INFO_rgExtension_getset }
,
    { (char *) "Issuer", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.Issuer", (void *) &CERT_INFO_Issuer_getset }
,
    { (char *) "NotBefore", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.NotBefore", (void *) &CERT_INFO_NotBefore_getset }
,
    { (char *) "Subject", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.Subject", (void *) &CERT_INFO_Subject_getset }
,
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"_CERT_INFO.__dict__", (void *) &CERT_INFO___dict___getset }
,
    { (char *) "dwVersion", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.dwVersion", (void *) &CERT_INFO_dwVersion_getset }
,
    { (char *) "SerialNumber", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.SerialNumber", (void *) &CERT_INFO_SerialNumber_getset }
,
    { (char *) "SignatureAlgorithm", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.SignatureAlgorithm", (void *) &CERT_INFO_SignatureAlgorithm_getset }
,
    { (char *) "NotAfter", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.NotAfter", (void *) &CERT_INFO_NotAfter_getset }
,
    { (char *) "SubjectPublicKeyInfo", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.SubjectPublicKeyInfo", (void *) &CERT_INFO_SubjectPublicKeyInfo_getset }
,
    { (char *) "IssuerUniqueId", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.IssuerUniqueId", (void *) &CERT_INFO_IssuerUniqueId_getset }
,
    { (char *) "SubjectUniqueId", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char *)"_CERT_INFO.SubjectUniqueId", (void *) &CERT_INFO_SubjectUniqueId_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin___CERT_INFO_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin___CERT_INFO_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin___CERT_INFO_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CERT_INFO",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CERT_INFO_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin___CERT_INFO_type.as_number,/* tp_as_number */
    &SwigPyBuiltin___CERT_INFO_type.as_sequence,                  /* tp_as_sequence */
    &SwigPyBuiltin___CERT_INFO_type.as_mapping,                   /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin___CERT_INFO_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::_CERT_INFO",                           /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin___CERT_INFO_richcompare,          /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin___CERT_INFO_methods,        /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin___CERT_INFO_getset,         /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CERT_INFO,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin___CERT_INFO_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin___CERT_INFO_type};

static SwigPyGetSet CertExtension___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CertExtension_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CertExtension.__dict__", (void *) &CertExtension___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CertExtension_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CertExtension_methods[] = {
  { "oid", (PyCFunction) _wrap_CertExtension_oid, METH_VARARGS, (char *) "oid()" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CertExtension_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CertExtension",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CertExtension_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CertExtension_type.as_number,                 /* tp_as_number */
    &SwigPyBuiltin__CertExtension_type.as_sequence,               /* tp_as_sequence */
    &SwigPyBuiltin__CertExtension_type.as_mapping,                /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CertExtension_type.as_buffer,                 /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CertExtension",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CertExtension_richcompare,       /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__CertExtension_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CertExtension_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CertExtension,       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CertExtension_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CertExtension_type};

static SwigPyGetSet Signature___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Signature_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"Signature.__dict__", (void *) &Signature___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Signature_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Signature_methods[] = {
  { "verify_data", (PyCFunction) _wrap_Signature_verify_data, METH_VARARGS, (char *) "\n"
		"verify_data(STRING, n) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"n: int\n"
		"\n"
		"" },
  { "sign_data", (PyCFunction) _wrap_Signature_sign_data, METH_VARARGS, (char *) "\n"
		"sign_data(STRING, signer, detach=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"signer: Cert *\n"
		"detach: bool\n"
		"\n"
		"sign_data(STRING, signer)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"signer: Cert *\n"
		"\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Signature_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.Signature",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_Signature_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Signature_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Signature_type.as_sequence,                   /* tp_as_sequence */
    &SwigPyBuiltin__Signature_type.as_mapping,/* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Signature_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::Signature",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__Signature_richcompare,           /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Signature_methods,         /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Signature_getset,          /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_Signature,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Signature_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Signature_type};

static SwigPyGetSet CertRequest___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__CertRequest_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"CertRequest.__dict__", (void *) &CertRequest___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__CertRequest_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__CertRequest_methods[] = {
  { "set_subject", (PyCFunction) _wrap_CertRequest_set_subject, METH_VARARGS, (char *) "\n"
		"set_subject(STRING)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "get_data", (PyCFunction) _wrap_CertRequest_get_data, METH_VARARGS, (char *) "get_data()" },
  { "add_attribute", (PyCFunction) _wrap_CertRequest_add_attribute, METH_VARARGS, (char *) "\n"
		"add_attribute(STRING) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "add_attribute_value", (PyCFunction) _wrap_CertRequest_add_attribute_value, METH_VARARGS, (char *) "\n"
		"add_attribute_value(n, STRING)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: int\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__CertRequest_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.CertRequest",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_CertRequest_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__CertRequest_type.as_number,                   /* tp_as_number */
    &SwigPyBuiltin__CertRequest_type.as_sequence,                 /* tp_as_sequence */
    &SwigPyBuiltin__CertRequest_type.as_mapping,                  /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__CertRequest_type.as_buffer,                   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::CertRequest",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__CertRequest_richcompare,         /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__CertRequest_methods,       /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__CertRequest_getset,        /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_CertRequest,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__CertRequest_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__CertRequest_type};

static SwigPyGetSet Hash___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Hash_getset[] = {
    { (char *) "__dict__", (getter) SwigPyBuiltin_GetterClosure, (setter) 0, (char *)"Hash.__dict__", (void *) &Hash___dict___getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Hash_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Hash_methods[] = {
  { "digest", (PyCFunction) _wrap_Hash_digest, METH_VARARGS, (char *) "digest()" },
  { "update", (PyCFunction) _wrap_Hash_update, METH_VARARGS, (char *) "\n"
		"update(STRING)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "sign", (PyCFunction) _wrap_Hash_sign, METH_VARARGS, (char *) "\n"
		"sign(dwKeyspec=1)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dwKeyspec: DWORD\n"
		"\n"
		"sign()\n"
		"" },
  { "verify", (PyCFunction) _wrap_Hash_verify, METH_VARARGS, (char *) "\n"
		"verify(cert, STRING) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cert: Cert *\n"
		"STRING: BYTE *\n"
		"\n"
		"" },
  { "derive_key", (PyCFunction) _wrap_Hash_derive_key, METH_VARARGS, (char *) "derive_key() -> Key" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Hash_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "csp.Hash",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) (destructor) _wrap_delete_Hash_destructor_closure,/* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Hash_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__Hash_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__Hash_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) SwigPyObject_hash,             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Hash_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::Hash",                                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__Hash_richcompare,                /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Hash_methods,              /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Hash_getset,               /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t) offsetof(SwigPyObject, dict),/* tp_dictoffset */
    (initproc) _wrap_new_Hash,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
    0,                                        /* tp_prev */
#endif
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Hash_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Hash_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SignatureTo_p_CryptMsg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CryptMsg *)  ((Signature *) x));
}
static void *_p_CertFindTo_p_CertIter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CertIter *)  ((CertFind *) x));
}
static void *_p_SignatureTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *) (CryptMsg *) ((Signature *) x));
}
static void *_p_CertTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *)  ((Cert *) x));
}
static void *_p_CertStoreTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *)  ((CertStore *) x));
}
static void *_p_CryptMsgTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *)  ((CryptMsg *) x));
}
static void *_p_KeyTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *)  ((Key *) x));
}
static void *_p_CertInfoTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *)  ((CertInfo *) x));
}
static void *_p_HashTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *)  ((Hash *) x));
}
static void *_p_CryptTo_p_RCObj(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RCObj *)  ((Crypt *) x));
}
static swig_type_info _swigt__p_CERT_EXTENSION = {"_p_CERT_EXTENSION", "CERT_EXTENSION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CERT_PUBLIC_KEY_INFO = {"_p_CERT_PUBLIC_KEY_INFO", "CERT_PUBLIC_KEY_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CRYPT_INTEGER_BLOB = {"_p_CRYPT_INTEGER_BLOB", "CRYPT_INTEGER_BLOB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cert = {"_p_Cert", "Cert *", 0, 0, (void*)&SwigPyBuiltin__Cert_clientdata, 0};
static swig_type_info _swigt__p_CertExtension = {"_p_CertExtension", "CertExtension *", 0, 0, (void*)&SwigPyBuiltin__CertExtension_clientdata, 0};
static swig_type_info _swigt__p_CertFind = {"_p_CertFind", "CertFind *", 0, 0, (void*)&SwigPyBuiltin__CertFind_clientdata, 0};
static swig_type_info _swigt__p_CertInfo = {"_p_CertInfo", "CertInfo *", 0, 0, (void*)&SwigPyBuiltin__CertInfo_clientdata, 0};
static swig_type_info _swigt__p_CertIter = {"_p_CertIter", "CertIter *", 0, 0, (void*)&SwigPyBuiltin__CertIter_clientdata, 0};
static swig_type_info _swigt__p_CertRequest = {"_p_CertRequest", "CertRequest *", 0, 0, (void*)&SwigPyBuiltin__CertRequest_clientdata, 0};
static swig_type_info _swigt__p_CertStore = {"_p_CertStore", "CertStore *", 0, 0, (void*)&SwigPyBuiltin__CertStore_clientdata, 0};
static swig_type_info _swigt__p_Crypt = {"_p_Crypt", "Crypt *", 0, 0, (void*)&SwigPyBuiltin__Crypt_clientdata, 0};
static swig_type_info _swigt__p_CryptDesc = {"_p_CryptDesc", "CryptDesc *", 0, 0, (void*)&SwigPyBuiltin__CryptDesc_clientdata, 0};
static swig_type_info _swigt__p_CryptIter = {"_p_CryptIter", "CryptIter *", 0, 0, (void*)&SwigPyBuiltin__CryptIter_clientdata, 0};
static swig_type_info _swigt__p_CryptMsg = {"_p_CryptMsg", "CryptMsg *", 0, 0, (void*)&SwigPyBuiltin__CryptMsg_clientdata, 0};
static swig_type_info _swigt__p_EKUIter = {"_p_EKUIter", "EKUIter *", 0, 0, (void*)&SwigPyBuiltin__EKUIter_clientdata, 0};
static swig_type_info _swigt__p_ExtIter = {"_p_ExtIter", "ExtIter *", 0, 0, (void*)&SwigPyBuiltin__ExtIter_clientdata, 0};
static swig_type_info _swigt__p_FILETIME = {"_p_FILETIME", "FILETIME *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Hash = {"_p_Hash", "Hash *", 0, 0, (void*)&SwigPyBuiltin__Hash_clientdata, 0};
static swig_type_info _swigt__p_Key = {"_p_Key", "Key *", 0, 0, (void*)&SwigPyBuiltin__Key_clientdata, 0};
static swig_type_info _swigt__p_PCCERT_CONTEXT = {"_p_PCCERT_CONTEXT", "PCCERT_CONTEXT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PCERT_EXTENSION = {"_p_PCERT_EXTENSION", "PCERT_EXTENSION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RCObj = {"_p_RCObj", "RCObj *", 0, 0, (void*)&SwigPyBuiltin__RCObj_clientdata, 0};
static swig_type_info _swigt__p_Signature = {"_p_Signature", "Signature *", 0, 0, (void*)&SwigPyBuiltin__Signature_clientdata, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__CERT_INFO = {"_p__CERT_INFO", "_CERT_INFO *|CERT_INFO *", 0, 0, (void*)&SwigPyBuiltin___CERT_INFO_clientdata, 0};
static swig_type_info _swigt__p__CMS_DH_KEY_INFO = {"_p__CMS_DH_KEY_INFO", "_CMS_DH_KEY_INFO *|CMS_DH_KEY_INFO *", 0, 0, (void*)&SwigPyBuiltin___CMS_DH_KEY_INFO_clientdata, 0};
static swig_type_info _swigt__p__CRYPTOAPI_BLOB = {"_p__CRYPTOAPI_BLOB", "CRYPT_ATTR_BLOB *|DATA_BLOB *|CRYPT_DATA_BLOB *|CRYPT_DIGEST_BLOB *|CRYPTOAPI_BLOB *|CRYPT_DER_BLOB *|CRYPT_HASH_BLOB *|CRL_BLOB *|CERT_NAME_BLOB *|CERT_RDN_VALUE_BLOB *|CRYPT_UINT_BLOB *|CERT_BLOB *|CRYPT_OBJID_BLOB *|_CRYPTOAPI_BLOB *", 0, 0, (void*)&SwigPyBuiltin___CRYPTOAPI_BLOB_clientdata, 0};
static swig_type_info _swigt__p__CRYPT_ALGORITHM_IDENTIFIER = {"_p__CRYPT_ALGORITHM_IDENTIFIER", "_CRYPT_ALGORITHM_IDENTIFIER *|CRYPT_ALGORITHM_IDENTIFIER *", 0, 0, (void*)&SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_clientdata, 0};
static swig_type_info _swigt__p__CRYPT_BIT_BLOB = {"_p__CRYPT_BIT_BLOB", "_CRYPT_BIT_BLOB *|CRYPT_BIT_BLOB *", 0, 0, (void*)&SwigPyBuiltin___CRYPT_BIT_BLOB_clientdata, 0};
static swig_type_info _swigt__p__GUID = {"_p__GUID", "GUID *|_GUID *", 0, 0, (void*)&SwigPyBuiltin___GUID_clientdata, 0};
static swig_type_info _swigt__p__LARGE_INTEGER = {"_p__LARGE_INTEGER", "_LARGE_INTEGER *|LARGE_INTEGER *", 0, 0, (void*)&SwigPyBuiltin___LARGE_INTEGER_clientdata, 0};
static swig_type_info _swigt__p__LUID = {"_p__LUID", "LUID *|_LUID *", 0, 0, (void*)&SwigPyBuiltin___LUID_clientdata, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CHAR *|TCHAR *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|_TINT *|int *|INT *|LONG *|HRESULT *|INT_PTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "LONG_PTR *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|LONGLONG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_char = {"_p_p_unsigned_char", "unsigned char **|BYTE **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "HINSTANCE *|HMODULE *|void **|HLOCAL *|HANDLE *|HWND *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|SHORT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|UCHAR *|BYTE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DWORD *|UINT *|unsigned int *|UINT_PTR *|ALG_ID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "HCRYPTHASH *|HCRYPTKEY *|ULONG_PTR *|DWORD_PTR *|unsigned long *|ULONG *|HCRYPTPROV *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "DWORDLONG *|unsigned long long *|ULONGLONG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "WORD *|unsigned short *|USHORT *|ATOM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "WCHAR *|wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CERT_EXTENSION,
  &_swigt__p_CERT_PUBLIC_KEY_INFO,
  &_swigt__p_CRYPT_INTEGER_BLOB,
  &_swigt__p_Cert,
  &_swigt__p_CertExtension,
  &_swigt__p_CertFind,
  &_swigt__p_CertInfo,
  &_swigt__p_CertIter,
  &_swigt__p_CertRequest,
  &_swigt__p_CertStore,
  &_swigt__p_Crypt,
  &_swigt__p_CryptDesc,
  &_swigt__p_CryptIter,
  &_swigt__p_CryptMsg,
  &_swigt__p_EKUIter,
  &_swigt__p_ExtIter,
  &_swigt__p_FILETIME,
  &_swigt__p_Hash,
  &_swigt__p_Key,
  &_swigt__p_PCCERT_CONTEXT,
  &_swigt__p_PCERT_EXTENSION,
  &_swigt__p_RCObj,
  &_swigt__p_Signature,
  &_swigt__p_SwigPyObject,
  &_swigt__p__CERT_INFO,
  &_swigt__p__CMS_DH_KEY_INFO,
  &_swigt__p__CRYPTOAPI_BLOB,
  &_swigt__p__CRYPT_ALGORITHM_IDENTIFIER,
  &_swigt__p__CRYPT_BIT_BLOB,
  &_swigt__p__GUID,
  &_swigt__p__LARGE_INTEGER,
  &_swigt__p__LUID,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_unsigned_char,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_CERT_EXTENSION[] = {  {&_swigt__p_CERT_EXTENSION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CERT_PUBLIC_KEY_INFO[] = {  {&_swigt__p_CERT_PUBLIC_KEY_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CRYPT_INTEGER_BLOB[] = {  {&_swigt__p_CRYPT_INTEGER_BLOB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cert[] = {  {&_swigt__p_Cert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CertExtension[] = {  {&_swigt__p_CertExtension, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CertFind[] = {  {&_swigt__p_CertFind, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CertInfo[] = {  {&_swigt__p_CertInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CertIter[] = {  {&_swigt__p_CertIter, 0, 0, 0},  {&_swigt__p_CertFind, _p_CertFindTo_p_CertIter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CertRequest[] = {  {&_swigt__p_CertRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CertStore[] = {  {&_swigt__p_CertStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Crypt[] = {  {&_swigt__p_Crypt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CryptDesc[] = {  {&_swigt__p_CryptDesc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CryptIter[] = {  {&_swigt__p_CryptIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CryptMsg[] = {  {&_swigt__p_Signature, _p_SignatureTo_p_CryptMsg, 0, 0},  {&_swigt__p_CryptMsg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EKUIter[] = {  {&_swigt__p_EKUIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExtIter[] = {  {&_swigt__p_ExtIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILETIME[] = {  {&_swigt__p_FILETIME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Hash[] = {  {&_swigt__p_Hash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Key[] = {  {&_swigt__p_Key, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PCCERT_CONTEXT[] = {  {&_swigt__p_PCCERT_CONTEXT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PCERT_EXTENSION[] = {  {&_swigt__p_PCERT_EXTENSION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RCObj[] = {  {&_swigt__p_RCObj, 0, 0, 0},  {&_swigt__p_Signature, _p_SignatureTo_p_RCObj, 0, 0},  {&_swigt__p_Cert, _p_CertTo_p_RCObj, 0, 0},  {&_swigt__p_CertStore, _p_CertStoreTo_p_RCObj, 0, 0},  {&_swigt__p_CryptMsg, _p_CryptMsgTo_p_RCObj, 0, 0},  {&_swigt__p_CertInfo, _p_CertInfoTo_p_RCObj, 0, 0},  {&_swigt__p_Hash, _p_HashTo_p_RCObj, 0, 0},  {&_swigt__p_Crypt, _p_CryptTo_p_RCObj, 0, 0},  {&_swigt__p_Key, _p_KeyTo_p_RCObj, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Signature[] = {  {&_swigt__p_Signature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__CERT_INFO[] = {  {&_swigt__p__CERT_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__CMS_DH_KEY_INFO[] = {  {&_swigt__p__CMS_DH_KEY_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__CRYPTOAPI_BLOB[] = {  {&_swigt__p__CRYPTOAPI_BLOB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__CRYPT_ALGORITHM_IDENTIFIER[] = {  {&_swigt__p__CRYPT_ALGORITHM_IDENTIFIER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__CRYPT_BIT_BLOB[] = {  {&_swigt__p__CRYPT_BIT_BLOB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__GUID[] = {  {&_swigt__p__GUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__LARGE_INTEGER[] = {  {&_swigt__p__LARGE_INTEGER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__LUID[] = {  {&_swigt__p__LUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_char[] = {  {&_swigt__p_p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CERT_EXTENSION,
  _swigc__p_CERT_PUBLIC_KEY_INFO,
  _swigc__p_CRYPT_INTEGER_BLOB,
  _swigc__p_Cert,
  _swigc__p_CertExtension,
  _swigc__p_CertFind,
  _swigc__p_CertInfo,
  _swigc__p_CertIter,
  _swigc__p_CertRequest,
  _swigc__p_CertStore,
  _swigc__p_Crypt,
  _swigc__p_CryptDesc,
  _swigc__p_CryptIter,
  _swigc__p_CryptMsg,
  _swigc__p_EKUIter,
  _swigc__p_ExtIter,
  _swigc__p_FILETIME,
  _swigc__p_Hash,
  _swigc__p_Key,
  _swigc__p_PCCERT_CONTEXT,
  _swigc__p_PCERT_EXTENSION,
  _swigc__p_RCObj,
  _swigc__p_Signature,
  _swigc__p_SwigPyObject,
  _swigc__p__CERT_INFO,
  _swigc__p__CMS_DH_KEY_INFO,
  _swigc__p__CRYPTOAPI_BLOB,
  _swigc__p__CRYPT_ALGORITHM_IDENTIFIER,
  _swigc__p__CRYPT_BIT_BLOB,
  _swigc__p__GUID,
  _swigc__p__LARGE_INTEGER,
  _swigc__p__LUID,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_unsigned_char,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[3];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "WINVER",SWIG_From_int(static_cast< int >(0x0500)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "NULL",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "FALSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TRUE",SWIG_From_int(static_cast< int >(1)));
  
  /* type '::_GUID' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___GUID_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'GUID'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "GUID", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "GUID");
  d = md;
  
  /* type '::_LARGE_INTEGER' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___LARGE_INTEGER_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'LARGE_INTEGER'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "LARGE_INTEGER", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "LARGE_INTEGER");
  d = md;
  
  /* type '::_LUID' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___LUID_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'LUID'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "LUID", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "LUID");
  d = md;
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_ANY",SWIG_From_int(static_cast< int >((0))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_SIGNATURE",SWIG_From_int(static_cast< int >((1 << 13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_MSG_ENCRYPT",SWIG_From_int(static_cast< int >((2 << 13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_DATA_ENCRYPT",SWIG_From_int(static_cast< int >((3 << 13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_HASH",SWIG_From_int(static_cast< int >((4 << 13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_KEY_EXCHANGE",SWIG_From_int(static_cast< int >((5 << 13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_ALL",SWIG_From_int(static_cast< int >((7 << 13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_ANY",SWIG_From_int(static_cast< int >((0))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_DSS",SWIG_From_int(static_cast< int >((1 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_RSA",SWIG_From_int(static_cast< int >((2 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_BLOCK",SWIG_From_int(static_cast< int >((3 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_STREAM",SWIG_From_int(static_cast< int >((4 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_DH",SWIG_From_int(static_cast< int >((5 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_SECURECHANNEL",SWIG_From_int(static_cast< int >((6 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_ANY",SWIG_From_int(static_cast< int >((0))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RSA_ANY",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RSA_PKCS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RSA_MSATWORK",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RSA_ENTRUST",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RSA_PGP",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DSS_ANY",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DSS_PKCS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DSS_DMS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DES",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_3DES",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DESX",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_IDEA",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_CAST",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SAFERSK64",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SAFERSK128",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_3DES_112",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_CYLINK_MEK",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RC5",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_AES_128",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_AES_192",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_AES_256",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_AES",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SKIPJACK",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_TEK",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_CBCI",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_CFBP",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_OFBP",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_CBCOFM",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_CBCOFMI",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RC2",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RC4",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SEAL",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_SANDF",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_EPHEM",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_AGREED_KEY_ANY",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_KEA",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_MD2",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_MD4",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_MD5",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SHA",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SHA1",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_MAC",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RIPEMD",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RIPEMD160",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SSL3SHAMD5",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_HMAC",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_TLS1PRF",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SSL3_MASTER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SCHANNEL_MASTER_HASH",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SCHANNEL_MAC_KEY",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PCT1_MASTER",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SSL2_MASTER",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_TLS1_MASTER",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SCHANNEL_ENC_KEY",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_EXAMPLE",SWIG_From_int(static_cast< int >(80)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_MD2",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|1))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_MD4",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|2))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_MD5",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|3))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SHA",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SHA1",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_MAC",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|5))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_RSA_SIGN",SWIG_From_int(static_cast< int >(((1 << 13)|(2 << 9)|0))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DSS_SIGN",SWIG_From_int(static_cast< int >(((1 << 13)|(1 << 9)|0))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_RSA_KEYX",SWIG_From_int(static_cast< int >(((5 << 13)|(2 << 9)|0))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DES",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|1))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_3DES_112",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_3DES",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|3))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DESX",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_RC2",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|2))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_RC4",SWIG_From_int(static_cast< int >(((3 << 13)|(4 << 9)|1))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SEAL",SWIG_From_int(static_cast< int >(((3 << 13)|(4 << 9)|2))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_SF",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|1))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_EPHEM",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|2))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_AGREEDKEY_ANY",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|3))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_KEA_KEYX",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_HUGHES_MD5",SWIG_From_int(static_cast< int >(((5 << 13)|(0)|3))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SKIPJACK",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|10))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TEK",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|11))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_CYLINK_MEK",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|12))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SSL3_SHAMD5",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|8))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SSL3_MASTER",SWIG_From_int(static_cast< int >(((2 << 13)|(6 << 9)|1))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SCHANNEL_MASTER_HASH",SWIG_From_int(static_cast< int >(((2 << 13)|(6 << 9)|2))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SCHANNEL_MAC_KEY",SWIG_From_int(static_cast< int >(((2 << 13)|(6 << 9)|3))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SCHANNEL_ENC_KEY",SWIG_From_int(static_cast< int >(((2 << 13)|(6 << 9)|7))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PCT1_MASTER",SWIG_From_int(static_cast< int >(((2 << 13)|(6 << 9)|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SSL2_MASTER",SWIG_From_int(static_cast< int >(((2 << 13)|(6 << 9)|5))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS1_MASTER",SWIG_From_int(static_cast< int >(((2 << 13)|(6 << 9)|6))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_RC5",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_HMAC",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS1PRF",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|10))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "SIGNATURE_RESOURCE_NUMBER",SWIG_From_int(static_cast< int >(0x29A)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_VERIFYCONTEXT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0xF0000000u)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_NEWKEYSET",SWIG_From_int(static_cast< int >(0x00000008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_DELETEKEYSET",SWIG_From_int(static_cast< int >(0x00000010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MACHINE_KEYSET",SWIG_From_int(static_cast< int >(0x00000020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SILENT",SWIG_From_int(static_cast< int >(0x00000040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_EXPORTABLE",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_USER_PROTECTED",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_CREATE_SALT",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_UPDATE_KEY",SWIG_From_int(static_cast< int >(0x00000008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_NO_SALT",SWIG_From_int(static_cast< int >(0x00000010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_PREGEN",SWIG_From_int(static_cast< int >(0x00000040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_RECIPIENT",SWIG_From_int(static_cast< int >(0x00000010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_INITIATOR",SWIG_From_int(static_cast< int >(0x00000040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ONLINE",SWIG_From_int(static_cast< int >(0x00000080)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SF",SWIG_From_int(static_cast< int >(0x00000100)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_CREATE_IV",SWIG_From_int(static_cast< int >(0x00000200)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_KEK",SWIG_From_int(static_cast< int >(0x00000400)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_DATA_KEY",SWIG_From_int(static_cast< int >(0x00000800)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_VOLATILE",SWIG_From_int(static_cast< int >(0x00001000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SGCKEY",SWIG_From_int(static_cast< int >(0x00002000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ARCHIVABLE",SWIG_From_int(static_cast< int >(0x00004000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SERVER",SWIG_From_int(static_cast< int >(0x00000400)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KEY_LENGTH_MASK",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0xFFFF0000u)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_Y_ONLY",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SSL2_FALLBACK",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_DESTROYKEY",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_OAEP",SWIG_From_int(static_cast< int >(0x00000040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_BLOB_VER3",SWIG_From_int(static_cast< int >(0x00000080)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SECRETDIGEST",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_LITTLE_ENDIAN",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_NOHASHOID",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_TYPE2_FORMAT",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_X931_FORMAT",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MACHINE_DEFAULT",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_USER_DEFAULT",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_DELETE_DEFAULT",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "SIMPLEBLOB",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PUBLICKEYBLOB",SWIG_From_int(static_cast< int >(0x6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PRIVATEKEYBLOB",SWIG_From_int(static_cast< int >(0x7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PLAINTEXTKEYBLOB",SWIG_From_int(static_cast< int >(0x8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "OPAQUEKEYBLOB",SWIG_From_int(static_cast< int >(0x9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PUBLICKEYBLOBEX",SWIG_From_int(static_cast< int >(0xA)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "SYMMETRICWRAPKEYBLOB",SWIG_From_int(static_cast< int >(0xB)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "AT_KEYEXCHANGE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "AT_SIGNATURE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_USERDATA",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_IV",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_SALT",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PADDING",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_MODE",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_MODE_BITS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PERMISSIONS",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_ALGID",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_BLOCKLEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_KEYLEN",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_SALT_EX",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_P",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_G",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_Q",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_X",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_Y",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_RA",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_RB",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_INFO",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_EFFECTIVE_KEYLEN",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_SCHANNEL_ALG",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_CLIENT_RANDOM",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_SERVER_RANDOM",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_RP",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PRECOMP_MD5",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PRECOMP_SHA",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_CERTIFICATE",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_CLEAR_KEY",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PUB_EX_LEN",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PUB_EX_VAL",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_KEYVAL",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_ADMIN_PIN",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_KEYEXCHANGE_PIN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_SIGNATURE_PIN",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PREHASH",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_OAEP_PARAMS",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_CMS_KEY_INFO",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_CMS_DH_KEY_INFO",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_PUB_PARAMS",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_VERIFY_PARAMS",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "KP_HIGHEST_VERSION",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PKCS5_PADDING",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "RANDOM_PADDING",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ZERO_PADDING",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_CBC",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_ECB",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_CFB",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_CTS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ENCRYPT",SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_DECRYPT",SWIG_From_int(static_cast< int >(0x0002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_EXPORT",SWIG_From_int(static_cast< int >(0x0004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_READ",SWIG_From_int(static_cast< int >(0x0008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_WRITE",SWIG_From_int(static_cast< int >(0x0010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MAC",SWIG_From_int(static_cast< int >(0x0020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_EXPORT_KEY",SWIG_From_int(static_cast< int >(0x0040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_IMPORT_KEY",SWIG_From_int(static_cast< int >(0x0080)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "HP_ALGID",SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "HP_HASHVAL",SWIG_From_int(static_cast< int >(0x0002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "HP_HASHSIZE",SWIG_From_int(static_cast< int >(0x0004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "HP_HMAC_INFO",SWIG_From_int(static_cast< int >(0x0005)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "HP_TLS1PRF_LABEL",SWIG_From_int(static_cast< int >(0x0006)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "HP_TLS1PRF_SEED",SWIG_From_int(static_cast< int >(0x0007)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FAILED",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SUCCEED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ENUMALGS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ENUMCONTAINERS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_IMPTYPE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_NAME",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_VERSION",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_CONTAINER",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_CHANGE_PASSWORD",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYSET_SEC_DESCR",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_CERTCHAIN",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEY_TYPE_SUBTYPE",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_PROVTYPE",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYSTORAGE",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_APPLI_CERT",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SYM_KEYSIZE",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SESSION_KEYSIZE",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_UI_PROMPT",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ENUMALGS_EX",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ENUMMANDROOTS",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ENUMELECTROOTS",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYSET_TYPE",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ADMIN_PIN",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYEXCHANGE_PIN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SIGNATURE_PIN",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SIG_KEYSIZE_INC",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYX_KEYSIZE_INC",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_UNIQUE_CONTAINER",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SGC_INFO",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_USE_HARDWARE_RNG",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYSPEC",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ENUMEX_SIGNING_PROT",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_CRYPT_COUNT_KEY_USE",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_USER_CERTSTORE",SWIG_From_int(static_cast< int >(42)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SMARTCARD_READER",SWIG_From_int(static_cast< int >(43)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SMARTCARD_GUID",SWIG_From_int(static_cast< int >(45)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_ROOT_CERTSTORE",SWIG_From_int(static_cast< int >(46)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FIRST",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_NEXT",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SGC_ENUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_IMPL_HARDWARE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_IMPL_SOFTWARE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_IMPL_MIXED",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_IMPL_UNKNOWN",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_IMPL_REMOVABLE",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SEC_DESCR",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_PSTORE",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_UI_PROMPT",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FLAG_PCT1",SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FLAG_SSL2",SWIG_From_int(static_cast< int >(0x0002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FLAG_SSL3",SWIG_From_int(static_cast< int >(0x0004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FLAG_TLS1",SWIG_From_int(static_cast< int >(0x0008)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FLAG_IPSEC",SWIG_From_int(static_cast< int >(0x0010)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FLAG_SIGNING",SWIG_From_int(static_cast< int >(0x0020)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SGC",SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_FASTSGC",SWIG_From_int(static_cast< int >(0x0002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_CLIENT_HWND",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_CONTEXT_INFO",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYEXCHANGE_KEYSIZE",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SIGNATURE_KEYSIZE",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_KEYEXCHANGE_ALG",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_SIGNATURE_ALG",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PP_DELETEKEY",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PROV_RSA_FULL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MS_DEF_PROV",SWIG_FromCharPtr("Microsoft Base Cryptographic Provider v1.0"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MAXUIDLEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "EXPO_OFFLOAD_REG_VALUE",SWIG_FromCharPtr("ExpoOffload"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "EXPO_OFFLOAD_FUNC_NAME",SWIG_FromCharPtr("OffloadModExpo"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CUR_BLOB_VERSION",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP",SWIG_FromCharPtr("1.3.6.1.5.5.7.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_SERVER_AUTH",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_CLIENT_AUTH",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_CODE_SIGNING",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_EMAIL_PROTECTION",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_IPSEC_END_SYSTEM",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_IPSEC_TUNNEL",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_IPSEC_USER",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_KP_TIMESTAMP_SIGNING",SWIG_FromCharPtr("1.3.6.1.5.5.7.3.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_IPSEC_KP_IKE_INTERMEDIATE",SWIG_FromCharPtr("1.3.6.1.5.5.8.2.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_CTL_USAGE_SIGNING",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_TIME_STAMP_SIGNING",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_SERVER_GATED_CRYPTO",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_SGC_NETSCAPE",SWIG_FromCharPtr("2.16.840.1.113730.4.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_EFS",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_EFS_RECOVERY",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.4.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_WHQL_CRYPTO",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_NT5_CRYPTO",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OEM_WHQL_CRYPTO",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_EMBEDDED_NT_CRYPTO",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ROOT_LIST_SIGNER",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.9"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_QUALIFIED_SUBORDINATION",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.10"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_KEY_RECOVERY",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.11"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_DOCUMENT_SIGNING",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.12"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_LIFETIME_SIGNING",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.3.13"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DRM",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.5.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DRM_INDIVIDUALIZATION",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.5.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_LICENSES",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.6.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_LICENSE_SERVER",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.6.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KP_SMARTCARD_LOGON",SWIG_FromCharPtr("1.3.6.1.4.1.311.20.2.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_YESNO_TRUST_ATTR",SWIG_FromCharPtr("1.3.6.1.4.1.311.10.4.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_POLICY_QUALIFIER_CPS",SWIG_FromCharPtr("1.3.6.1.5.5.7.2.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKIX_POLICY_QUALIFIER_USERNOTICE",SWIG_FromCharPtr("1.3.6.1.5.5.7.2.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CERT_POLICIES_95_QUALIFIER1",SWIG_FromCharPtr("2.16.840.1.113733.1.7.1.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CERT_EXTENSIONS",SWIG_FromCharPtr("1.3.6.1.4.1.311.2.1.14"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_AUTHORITY_KEY_IDENTIFIER",SWIG_FromCharPtr("2.5.29.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KEY_ATTRIBUTES",SWIG_FromCharPtr("2.5.29.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CERT_POLICIES_95",SWIG_FromCharPtr("2.5.29.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KEY_USAGE_RESTRICTION",SWIG_FromCharPtr("2.5.29.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_SUBJECT_ALT_NAME",SWIG_FromCharPtr("2.5.29.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ISSUER_ALT_NAME",SWIG_FromCharPtr("2.5.29.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_BASIC_CONSTRAINTS",SWIG_FromCharPtr("2.5.29.10"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_KEY_USAGE",SWIG_FromCharPtr("2.5.29.15"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PRIVATEKEY_USAGE_PERIOD",SWIG_FromCharPtr("2.5.29.16"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_BASIC_CONSTRAINTS2",SWIG_FromCharPtr("2.5.29.19"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CERT_POLICIES",SWIG_FromCharPtr("2.5.29.32"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ANY_CERT_POLICY",SWIG_FromCharPtr("2.5.29.32.0"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_AUTHORITY_KEY_IDENTIFIER2",SWIG_FromCharPtr("2.5.29.35"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_SUBJECT_KEY_IDENTIFIER",SWIG_FromCharPtr("2.5.29.14"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_SUBJECT_ALT_NAME2",SWIG_FromCharPtr("2.5.29.17"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ISSUER_ALT_NAME2",SWIG_FromCharPtr("2.5.29.18"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CRL_REASON_CODE",SWIG_FromCharPtr("2.5.29.21"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_REASON_CODE_HOLD",SWIG_FromCharPtr("2.5.29.23"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CRL_DIST_POINTS",SWIG_FromCharPtr("2.5.29.31"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ENHANCED_KEY_USAGE",SWIG_FromCharPtr("2.5.29.37"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_APPLICATION_CERT_POLICIES",SWIG_FromCharPtr("1.3.6.1.4.1.311.21.10"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ANY_ENHANCED_KEY_USAGE",SWIG_FromCharPtr("2.5.29.37.0"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CRL_NUMBER",SWIG_FromCharPtr("2.5.29.20"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DELTA_CRL_INDICATOR",SWIG_FromCharPtr("2.5.29.27"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ISSUING_DIST_POINT",SWIG_FromCharPtr("2.5.29.28"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_FRESHEST_CRL",SWIG_FromCharPtr("2.5.29.46"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_NAME_CONSTRAINTS",SWIG_FromCharPtr("2.5.29.30"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CERTSRV_CA_VERSION",SWIG_FromCharPtr("1.3.6.1.4.1.311.21.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CERTSRV_CROSSCA_VERSION",SWIG_FromCharPtr("1.3.6.1.4.1.311.21.22"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ASN_ENCODING",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_NDR_ENCODING",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "X509_ASN_ENCODING",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "X509_NDR_ENCODING",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PKCS_7_ASN_ENCODING",SWIG_From_int(static_cast< int >(0x00010000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PKCS_7_NDR_ENCODING",SWIG_From_int(static_cast< int >(0x00020000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA",SWIG_FromCharPtr("1.2.840.113549"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS",SWIG_FromCharPtr("1.2.840.113549.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_HASH",SWIG_FromCharPtr("1.2.840.113549.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_ENCRYPT",SWIG_FromCharPtr("1.2.840.113549.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_1",SWIG_FromCharPtr("1.2.840.113549.1.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_2",SWIG_FromCharPtr("1.2.840.113549.1.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_3",SWIG_FromCharPtr("1.2.840.113549.1.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_4",SWIG_FromCharPtr("1.2.840.113549.1.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_5",SWIG_FromCharPtr("1.2.840.113549.1.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_6",SWIG_FromCharPtr("1.2.840.113549.1.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_7",SWIG_FromCharPtr("1.2.840.113549.1.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_8",SWIG_FromCharPtr("1.2.840.113549.1.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_9",SWIG_FromCharPtr("1.2.840.113549.1.9"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_10",SWIG_FromCharPtr("1.2.840.113549.1.10"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_PKCS_12",SWIG_FromCharPtr("1.2.840.113549.1.12"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_RSA",SWIG_FromCharPtr("1.2.840.113549.1.1.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_MD2RSA",SWIG_FromCharPtr("1.2.840.113549.1.1.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_MD4RSA",SWIG_FromCharPtr("1.2.840.113549.1.1.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_MD5RSA",SWIG_FromCharPtr("1.2.840.113549.1.1.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_SHA1RSA",SWIG_FromCharPtr("1.2.840.113549.1.1.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_SETOAEP_RSA",SWIG_FromCharPtr("1.2.840.113549.1.1.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_DH",SWIG_FromCharPtr("1.2.840.113549.1.3.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_data",SWIG_FromCharPtr("1.2.840.113549.1.7.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_signedData",SWIG_FromCharPtr("1.2.840.113549.1.7.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_envelopedData",SWIG_FromCharPtr("1.2.840.113549.1.7.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_signEnvData",SWIG_FromCharPtr("1.2.840.113549.1.7.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_digestedData",SWIG_FromCharPtr("1.2.840.113549.1.7.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_hashedData",SWIG_FromCharPtr("1.2.840.113549.1.7.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_encryptedData",SWIG_FromCharPtr("1.2.840.113549.1.7.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_emailAddr",SWIG_FromCharPtr("1.2.840.113549.1.9.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_unstructName",SWIG_FromCharPtr("1.2.840.113549.1.9.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_contentType",SWIG_FromCharPtr("1.2.840.113549.1.9.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_messageDigest",SWIG_FromCharPtr("1.2.840.113549.1.9.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_signingTime",SWIG_FromCharPtr("1.2.840.113549.1.9.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_counterSign",SWIG_FromCharPtr("1.2.840.113549.1.9.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_challengePwd",SWIG_FromCharPtr("1.2.840.113549.1.9.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_unstructAddr",SWIG_FromCharPtr("1.2.840.113549.1.9.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_extCertAttrs",SWIG_FromCharPtr("1.2.840.113549.1.9.9"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_certExtensions",SWIG_FromCharPtr("1.2.840.113549.1.9.14"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_SMIMECapabilities",SWIG_FromCharPtr("1.2.840.113549.1.9.15"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_preferSignedData",SWIG_FromCharPtr("1.2.840.113549.1.9.15.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_SMIMEalg",SWIG_FromCharPtr("1.2.840.113549.1.9.16.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_SMIMEalgESDH",SWIG_FromCharPtr("1.2.840.113549.1.9.16.3.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_SMIMEalgCMS3DESwrap",SWIG_FromCharPtr("1.2.840.113549.1.9.16.3.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_SMIMEalgCMSRC2wrap",SWIG_FromCharPtr("1.2.840.113549.1.9.16.3.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_MD2",SWIG_FromCharPtr("1.2.840.113549.2.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_MD4",SWIG_FromCharPtr("1.2.840.113549.2.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_MD5",SWIG_FromCharPtr("1.2.840.113549.2.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_RC2CBC",SWIG_FromCharPtr("1.2.840.113549.3.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_RC4",SWIG_FromCharPtr("1.2.840.113549.3.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_DES_EDE3_CBC",SWIG_FromCharPtr("1.2.840.113549.3.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_RSA_RC5_CBCPad",SWIG_FromCharPtr("1.2.840.113549.3.9"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ANSI_X942",SWIG_FromCharPtr("1.2.840.10046"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ANSI_X942_DH",SWIG_FromCharPtr("1.2.840.10046.2.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_X957",SWIG_FromCharPtr("1.2.840.10040"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_X957_DSA",SWIG_FromCharPtr("1.2.840.10040.4.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_X957_SHA1DSA",SWIG_FromCharPtr("1.2.840.10040.4.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DS",SWIG_FromCharPtr("2.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DSALG",SWIG_FromCharPtr("2.5.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DSALG_CRPT",SWIG_FromCharPtr("2.5.8.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DSALG_HASH",SWIG_FromCharPtr("2.5.8.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DSALG_SIGN",SWIG_FromCharPtr("2.5.8.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_DSALG_RSA",SWIG_FromCharPtr("2.5.8.1.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIW",SWIG_FromCharPtr("1.3.14"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC",SWIG_FromCharPtr("1.3.14.3.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_md4RSA",SWIG_FromCharPtr("1.3.14.3.2.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_md5RSA",SWIG_FromCharPtr("1.3.14.3.2.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_md4RSA2",SWIG_FromCharPtr("1.3.14.3.2.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_desECB",SWIG_FromCharPtr("1.3.14.3.2.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_desCBC",SWIG_FromCharPtr("1.3.14.3.2.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_desOFB",SWIG_FromCharPtr("1.3.14.3.2.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_desCFB",SWIG_FromCharPtr("1.3.14.3.2.9"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_desMAC",SWIG_FromCharPtr("1.3.14.3.2.10"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_rsaSign",SWIG_FromCharPtr("1.3.14.3.2.11"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_dsa",SWIG_FromCharPtr("1.3.14.3.2.12"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_shaDSA",SWIG_FromCharPtr("1.3.14.3.2.13"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_mdc2RSA",SWIG_FromCharPtr("1.3.14.3.2.14"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_shaRSA",SWIG_FromCharPtr("1.3.14.3.2.15"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_dhCommMod",SWIG_FromCharPtr("1.3.14.3.2.16"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_desEDE",SWIG_FromCharPtr("1.3.14.3.2.17"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_sha",SWIG_FromCharPtr("1.3.14.3.2.18"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_mdc2",SWIG_FromCharPtr("1.3.14.3.2.19"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_dsaComm",SWIG_FromCharPtr("1.3.14.3.2.20"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_dsaCommSHA",SWIG_FromCharPtr("1.3.14.3.2.21"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_rsaXchg",SWIG_FromCharPtr("1.3.14.3.2.22"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_keyHashSeal",SWIG_FromCharPtr("1.3.14.3.2.23"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_md2RSASign",SWIG_FromCharPtr("1.3.14.3.2.24"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_md5RSASign",SWIG_FromCharPtr("1.3.14.3.2.25"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_sha1",SWIG_FromCharPtr("1.3.14.3.2.26"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_dsaSHA1",SWIG_FromCharPtr("1.3.14.3.2.27"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_dsaCommSHA1",SWIG_FromCharPtr("1.3.14.3.2.28"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWSEC_sha1RSASign",SWIG_FromCharPtr("1.3.14.3.2.29"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWDIR",SWIG_FromCharPtr("1.3.14.7.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWDIR_CRPT",SWIG_FromCharPtr("1.3.14.7.2.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWDIR_HASH",SWIG_FromCharPtr("1.3.14.7.2.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWDIR_SIGN",SWIG_FromCharPtr("1.3.14.7.2.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWDIR_md2",SWIG_FromCharPtr("1.3.14.7.2.2.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_OIWDIR_md2RSA",SWIG_FromCharPtr("1.3.14.7.2.3.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC",SWIG_FromCharPtr("2.16.840.1.101.2.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_sdnsSignature",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicSignature",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_sdnsConfidentiality",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicConfidentiality",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.4"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_sdnsIntegrity",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.5"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicIntegrity",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.6"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_sdnsTokenProtection",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.7"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicTokenProtection",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.8"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_sdnsKeyManagement",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.9"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicKeyManagement",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.10"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_sdnsKMandSig",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.11"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicKMandSig",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.12"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_SuiteASignature",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.13"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_SuiteAConfidentiality",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.14"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_SuiteAIntegrity",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.15"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_SuiteATokenProtection",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.16"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_SuiteAKeyManagement",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.17"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_SuiteAKMandSig",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.18"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicUpdatedSig",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.19"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicKMandUpdSig",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.20"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_INFOSEC_mosaicUpdatedInteg",SWIG_FromCharPtr("2.16.840.1.101.2.1.1.21"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_NIST_sha256",SWIG_FromCharPtr("2.16.840.1.101.3.4.2.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_NIST_sha384",SWIG_FromCharPtr("2.16.840.1.101.3.4.2.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_NIST_sha512",SWIG_FromCharPtr("2.16.840.1.101.3.4.2.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ECDSA_SHA1",SWIG_FromCharPtr("1.2.840.10045.4.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_AUTO_ENROLL_CTL_USAGE",SWIG_FromCharPtr("1.3.6.1.4.1.311.20.1"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_ENROLL_CERTTYPE_EXTENSION",SWIG_FromCharPtr("1.3.6.1.4.1.311.20.2"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "szOID_CERT_MANIFOLD",SWIG_FromCharPtr("1.3.6.1.4.1.311.20.3"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_V1",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_V2",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_V3",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_VERSION_FLAG",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_SERIAL_NUMBER_FLAG",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_SIGNATURE_ALGORITHM_FLAG",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_ISSUER_FLAG",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_NOT_BEFORE_FLAG",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_NOT_AFTER_FLAG",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_SUBJECT_FLAG",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_ISSUER_UNIQUE_ID_FLAG",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_SUBJECT_UNIQUE_ID_FLAG",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_INFO_EXTENSION_FLAG",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ACQUIRE_CACHE_FLAG",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ACQUIRE_USE_PROV_INFO_FLAG",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ACQUIRE_COMPARE_KEY_FLAG",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ACQUIRE_SILENT_FLAG",SWIG_From_int(static_cast< int >(0x00000040)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_REQUEST_V1",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_MASK",SWIG_From_int(static_cast< int >(0xFFFF)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_SHIFT",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_ANY",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_SHA1_HASH",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_NAME",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_ATTR",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_MD5_HASH",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_PROPERTY",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_PUBLIC_KEY",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_HASH",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_NAME_STR_A",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_NAME_STR_W",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_KEY_SPEC",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_ENHKEY_USAGE",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_CTL_USAGE",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_SUBJECT_CERT",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_ISSUER_OF",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_EXISTING",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_SIGNATURE_HASH",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_KEY_IDENTIFIER",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_CERT_ID",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_CROSS_CERT_DIST_POINTS",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_COMPARE_PUBKEY_MD5_HASH",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ANY",SWIG_From_int(static_cast< int >((0 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SHA1_HASH",SWIG_From_int(static_cast< int >((1 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_MD5_HASH",SWIG_From_int(static_cast< int >((4 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SIGNATURE_HASH",SWIG_From_int(static_cast< int >((14 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_KEY_IDENTIFIER",SWIG_From_int(static_cast< int >((15 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_HASH",SWIG_From_int(static_cast< int >((1 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_PROPERTY",SWIG_From_int(static_cast< int >((5 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_PUBLIC_KEY",SWIG_From_int(static_cast< int >((6 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SUBJECT_NAME",SWIG_From_int(static_cast< int >((2 << 16|7))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SUBJECT_ATTR",SWIG_From_int(static_cast< int >((3 << 16|7))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ISSUER_NAME",SWIG_From_int(static_cast< int >((2 << 16|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ISSUER_ATTR",SWIG_From_int(static_cast< int >((3 << 16|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SUBJECT_STR_A",SWIG_From_int(static_cast< int >((7 << 16|7))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SUBJECT_STR_W",SWIG_From_int(static_cast< int >((8 << 16|7))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SUBJECT_STR",SWIG_From_int(static_cast< int >((8 << 16|7))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ISSUER_STR_A",SWIG_From_int(static_cast< int >((7 << 16|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ISSUER_STR_W",SWIG_From_int(static_cast< int >((8 << 16|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ISSUER_STR",SWIG_From_int(static_cast< int >((8 << 16|4))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_KEY_SPEC",SWIG_From_int(static_cast< int >((9 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ENHKEY_USAGE",SWIG_From_int(static_cast< int >((10 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_CTL_USAGE",SWIG_From_int(static_cast< int >((10 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_SUBJECT_CERT",SWIG_From_int(static_cast< int >((11 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_ISSUER_OF",SWIG_From_int(static_cast< int >((12 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_EXISTING",SWIG_From_int(static_cast< int >((13 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_CERT_ID",SWIG_From_int(static_cast< int >((16 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_CROSS_CERT_DIST_POINTS",SWIG_From_int(static_cast< int >((17 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_FIND_PUBKEY_MD5_HASH",SWIG_From_int(static_cast< int >((18 << 16))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_DIGITAL_SIGNATURE_KEY_USAGE",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_NON_REPUDIATION_KEY_USAGE",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_KEY_ENCIPHERMENT_KEY_USAGE",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_DATA_ENCIPHERMENT_KEY_USAGE",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_KEY_AGREEMENT_KEY_USAGE",SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_KEY_CERT_SIGN_KEY_USAGE",SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_OFFLINE_CRL_SIGN_KEY_USAGE",SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_CRL_SIGN_KEY_USAGE",SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CERT_ENCIPHER_ONLY_KEY_USAGE",SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_DEF_PROV_A",SWIG_FromCharPtr("Crypto-Pro Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_DEF_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro Cryptographic Service Provider"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_DEF_PROV",SWIG_FromCharPtr("Crypto-Pro Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_94_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-94 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_94_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-94 Cryptographic Service Provider"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_94_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-94 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2001_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2001_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2001_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2012_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2012_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2012_STRONG_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2012_STRONG_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2001_HSM_LOCAL_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 HSM Local CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2001_HSM_LOCAL_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 HSM Local CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2001_HSM_LOCAL_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 HSM Local CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2012_HSM_LOCAL_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 HSM Local CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2012_HSM_LOCAL_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2012 HSM Local CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_GR3410_2012_HSM_LOCAL_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 HSM Local CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_94_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-94 KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_94_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-94 KC1 CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_94_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-94 KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 KC1 CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2012_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2012_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2012_STRONG_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC1 Strong CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2012_STRONG_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC1 Strong CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_94_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-94 KC2 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_94_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-94 KC2 CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_94_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-94 KC2 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_2001_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 KC2 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_2001_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 KC2 CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_2001_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 KC2 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_2012_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC2 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_2012_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC2 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_2012_STRONG_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC2 Strong CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC2_GR3410_2012_STRONG_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2012 KC2 Strong CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PH_GR3410_2001_PROV_A",SWIG_FromCharPtr("Phoenix-CS GOST R 34.10-2001 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PH_GR3410_2001_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Phoenix-CS GOST R 34.10-2001 Cryptographic Service Provider"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PH_GR3410_2001_PROV",SWIG_FromCharPtr("Phoenix-CS GOST R 34.10-2001 Cryptographic Service Provider"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_MAGISTRA_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_MAGISTRA_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 FKC CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_RUTOKEN_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_RUTOKEN_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 FKC CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_ETOKEN_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_ETOKEN_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 FKC CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_ETOKENGOST_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_ETOKENGOST_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 FKC CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_UECFK_PROV_A",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_UECFK_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro GOST R 34.10-2001 FKC CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_MAGISTRA_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_RUTOKEN_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_ETOKEN_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_ETOKENGOST_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_UECFK_PROV",SWIG_FromCharPtr("Crypto-Pro GOST R 34.10-2001 FKC CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_FLASH_PROV_A",SWIG_FromCharPtr("Crypto-Pro Flash Drive KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_FLASH_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro Flash Drive KC1 CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_FLASH_PROV",SWIG_FromCharPtr("Crypto-Pro Flash Drive KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_REGISTRY_PROV_A",SWIG_FromCharPtr("Crypto-Pro Registry KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_REGISTRY_PROV_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"Crypto-Pro Registry KC1 CSP"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_KC1_GR3410_2001_REGISTRY_PROV",SWIG_FromCharPtr("Crypto-Pro Registry KC1 CSP"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPTOPRO_TRUSTED_CERT_STORE_NAME_A",SWIG_FromCharPtr("CryptoProTrustedStore"));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPTOPRO_TRUSTED_CERT_STORE_NAME_W",SWIG_NewPointerObj(SWIG_as_voidptr(L"CryptoProTrustedStore"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PROV_GOST_DH",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PROV_GOST_94_DH",SWIG_From_int(static_cast< int >(71)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PROV_GOST_2001_DH",SWIG_From_int(static_cast< int >(75)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PROV_GOST_2012_256",SWIG_From_int(static_cast< int >(80)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PROV_GOST_2012_512",SWIG_From_int(static_cast< int >(81)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CSP_v1",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CSP_v2",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_XER_ENCODING",SWIG_From_int(static_cast< int >((8))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_GENERAL",SWIG_From_int(static_cast< int >(0x00004000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_TOKEN_SHARED",SWIG_From_int(static_cast< int >(0x00008000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_NOSERIALIZE",SWIG_From_int(static_cast< int >(0x00010000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_REBOOT",SWIG_From_int(static_cast< int >(0x00020000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_PROMT_INSERT_MEDIA",SWIG_From_int(static_cast< int >(0x00040000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_UECDATACONTEXT",SWIG_From_int(static_cast< int >(0x00080000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_CMS_HIGHLOAD_NOSERIALIZE",SWIG_From_int(static_cast< int >(0x00100000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ACQUIRE_CONTEXT_SUPPORTED_FLAGS",SWIG_From_int(static_cast< int >((0x00004000|0x00008000|0x00010000|0x00020000|0x00040000|0x00080000|0x00100000))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCMSG_CADES_STRICT",SWIG_From_int(static_cast< int >((0x00000100))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCMSG_CADES_DISABLE",SWIG_From_int(static_cast< int >((0x00000200))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCMSG_CADES_DISABLE_CERT_SEARCH",SWIG_From_int(static_cast< int >((0x00000400))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCMSG_DTBS_CONTENT",SWIG_From_int(static_cast< int >((0x00000800))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCMSG_DTBS_ATTRIBUTE",SWIG_From_int(static_cast< int >((0x00001000))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCRYPT_MESSAGE_CADES_STRICT",SWIG_From_int(static_cast< int >(((0x00000100)))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCRYPT_MESSAGE_CADES_DISABLE",SWIG_From_int(static_cast< int >(((0x00000200)))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCRYPT_MESSAGE_DTBS_CONTENT",SWIG_From_int(static_cast< int >(((0x00000800)))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CPCRYPT_MESSAGE_DTBS_ATTRIBUTE",SWIG_From_int(static_cast< int >(((0x00001000)))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ECCNEGATIVE",SWIG_From_int(static_cast< int >(0x00000400)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_PUBLICCOMPRESS",SWIG_From_int(static_cast< int >(0x00000800)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_CRYPT_DH_ALLOWED",SWIG_From_int(static_cast< int >(0x00002000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_CRYPT_DH_PERMISSION",SWIG_From_int(static_cast< int >(0x00010000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_CRYPT_CALCULATE_PUBLIC_KEY",SWIG_From_int(static_cast< int >((0x80))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_PUBKEY_REUSABLE",SWIG_From_int(static_cast< int >(0x00002000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_EKEXOR",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MODE_EKEECADD",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ISO10126_PADDING",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ANSI_X923_PADDING",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "USERKEY_KEYEXCHANGE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "USERKEY_SIGNATURE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_CRYPT_PUBLICKEY_FROM_CERT",SWIG_From_int(static_cast< int >((0x00010000))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CP_DISREGARD_STRENGTHENED_KEY_USAGE_CONTROL",SWIG_From_int(static_cast< int >((0x80000000))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_GR3410",SWIG_From_int(static_cast< int >((7 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_SHAREDKEY",SWIG_From_int(static_cast< int >((8 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_HASH",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_HASH34",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_HMAC_FIXEDKEY",SWIG_From_int(static_cast< int >(55)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_UECMASTER_DIVERS",SWIG_From_int(static_cast< int >(47)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SHAREDKEY_HASH",SWIG_From_int(static_cast< int >(50)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_FITTINGKEY_HASH",SWIG_From_int(static_cast< int >(51)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_G28147",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PRODIVERS",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_RIC1DIVERS",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PRO12DIVERS",SWIG_From_int(static_cast< int >(45)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PRO_EXP",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SIMPLE_EXP",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PRO12_EXP",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3412_2015_M",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3412_2015_K",SWIG_From_int(static_cast< int >(49)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_G28147_MAC",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_G28147_CHV",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_TLS1_MASTER_HASH",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_TLS1PRF_2012_256",SWIG_From_int(static_cast< int >(49)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_TLS1_MASTER_HASH_2012_256",SWIG_From_int(static_cast< int >(54)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SHA_256",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SHA_384",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SHA_512",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_256",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_512",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_256_HMAC",SWIG_From_int(static_cast< int >(52)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_512_HMAC",SWIG_From_int(static_cast< int >(53)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_256_HMAC_FIXEDKEY",SWIG_From_int(static_cast< int >(56)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_512_HMAC_FIXEDKEY",SWIG_From_int(static_cast< int >(57)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PBKDF2_2012_512",SWIG_From_int(static_cast< int >(58)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PBKDF2_2012_256",SWIG_From_int(static_cast< int >(59)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_PRFKEYMAT",SWIG_From_int(static_cast< int >(74)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_256_PRFKEYMAT",SWIG_From_int(static_cast< int >(75)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3411_2012_512_PRFKEYMAT",SWIG_From_int(static_cast< int >(76)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_SYMMETRIC_512",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_EX_SF",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_EX_EPHEM",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_PRO_AGREEDKEY_DH",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410EL",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410_12_256",SWIG_From_int(static_cast< int >(73)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410_12_512",SWIG_From_int(static_cast< int >(61)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_EL_SF",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_EL_EPHEM",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_GR3410_12_256_SF",SWIG_From_int(static_cast< int >(70)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_GR3410_12_256_EPHEM",SWIG_From_int(static_cast< int >(71)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_GR3410_12_512_SF",SWIG_From_int(static_cast< int >(66)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_DH_GR3410_12_512_EPHEM",SWIG_From_int(static_cast< int >(67)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410_94_ESDH",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410_01_ESDH",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410_12_256_ESDH",SWIG_From_int(static_cast< int >(72)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_GR3410_12_512_ESDH",SWIG_From_int(static_cast< int >(63)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_EKE_CIPHER",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_EKE_EXPORTPUBLIC",SWIG_From_int(static_cast< int >(42)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_EKEVERIFY_HASH",SWIG_From_int(static_cast< int >(43)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_UECDIVERS",SWIG_From_int(static_cast< int >(44)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_UECSYMMETRIC",SWIG_From_int(static_cast< int >(46)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_SID_UECSYMMETRIC_EPHEM",SWIG_From_int(static_cast< int >(47)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_CLASS_UECSYMMETRIC",SWIG_From_int(static_cast< int >((6 << 13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "AT_UECSYMMETRICKEY",SWIG_From_int(static_cast< int >(0x80000004)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SHA_256",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|12))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SHA_384",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|13))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SHA_512",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|14))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|30))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_256",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|33))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_512",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|34))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_HMAC",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|39))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_HMAC34",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|40))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_UECMASTER_DIVERS",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|47))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_HMAC_FIXEDKEY",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|55))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_256_HMAC",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|52))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_512_HMAC",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|53))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_256_HMAC_FIXEDKEY",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|56))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_512_HMAC_FIXEDKEY",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|57))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_PRFKEYMAT",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|74))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_256_PRFKEYMAT",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|75))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3411_2012_512_PRFKEYMAT",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|76))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_G28147_MAC",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|31))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_G28147_IMIT",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|31))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_G28147_CHV",SWIG_From_int(static_cast< int >(((3 << 13)|(0)|31))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410",SWIG_From_int(static_cast< int >(((1 << 13)|(7 << 9)|30))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410EL",SWIG_From_int(static_cast< int >(((1 << 13)|(7 << 9)|35))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410_12_256",SWIG_From_int(static_cast< int >(((1 << 13)|(7 << 9)|73))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410_12_512",SWIG_From_int(static_cast< int >(((1 << 13)|(7 << 9)|61))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_G28147",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|30))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SYMMETRIC_512",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|34))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3412_2015_M",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|48))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3412_2015_K",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|49))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_EX_SF",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|30))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_EX_EPHEM",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|31))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_EX",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|30))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_EL_SF",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|36))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_EL_EPHEM",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|37))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_GR3410_12_256_SF",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|70))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_GR3410_12_256_EPHEM",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|71))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_GR3410_12_512_SF",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|66))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_DH_GR3410_12_512_EPHEM",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|67))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_UECSYMMETRIC",SWIG_From_int(static_cast< int >(((6 << 13)|(3 << 9)|46))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_UECSYMMETRIC_EPHEM",SWIG_From_int(static_cast< int >(((6 << 13)|(3 << 9)|47))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410_94_ESDH",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|39))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410_01_ESDH",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|40))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410_12_256_ESDH",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|72))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_GR3410_12_512_ESDH",SWIG_From_int(static_cast< int >(((5 << 13)|(5 << 9)|63))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PRO_AGREEDKEY_DH",SWIG_From_int(static_cast< int >(((5 << 13)|(3 << 9)|33))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PRO12_EXPORT",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|33))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PRO_EXPORT",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|31))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SIMPLE_EXPORT",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|32))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS1PRF_2012_256",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|49))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS1_MASTER_HASH",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|32))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS1_MASTER_HASH_2012_256",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|54))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS1_MAC_KEY",SWIG_From_int(static_cast< int >(((3 << 13)|(6 << 9)|3))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS1_ENC_KEY",SWIG_From_int(static_cast< int >(((3 << 13)|(6 << 9)|7))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PBKDF2_2012_512",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|58))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PBKDF2_2012_256",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|59))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_SHAREDKEY_HASH",SWIG_From_int(static_cast< int >(((4 << 13)|(8 << 9)|50))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_FITTINGKEY_HASH",SWIG_From_int(static_cast< int >(((4 << 13)|(8 << 9)|51))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PRO_DIVERS",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|38))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_RIC_DIVERS",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|40))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_OSCAR_DIVERS",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|40))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_PRO12_DIVERS",SWIG_From_int(static_cast< int >(((3 << 13)|(3 << 9)|45))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_EKE_CIPHER",SWIG_From_int(static_cast< int >(((5 << 13)|(3 << 9)|41))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_EKEVERIFY_HASH",SWIG_From_int(static_cast< int >(((4 << 13)|(0)|43))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_OID_INFO_CNG_ONLY",SWIG_From_int(static_cast< int >(0xFFFFFFFF)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_OID_INFO_PARAMETERS",SWIG_From_int(static_cast< int >(0xFFFFFFFE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TLS_CIPHER_2001",SWIG_From_int(static_cast< int >(0x0081)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TLS_CIPHER_SCSV",SWIG_From_int(static_cast< int >(0x00FF)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TLS_CIPHER_2012",SWIG_From_int(static_cast< int >(0xFF85)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TLS_LEGACY_SUITE_NAME",SWIG_NewPointerObj(SWIG_as_voidptr(L"TLS_GOST_R_3410_WITH_28147_LEGACY"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TLS_CIPHER_94_SUITE_NAME",SWIG_NewPointerObj(SWIG_as_voidptr(L"TLS_GOST_R_3410_94_WITH_28147_CNT_IMIT"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TLS_CIPHER_2001_SUITE_NAME",SWIG_NewPointerObj(SWIG_as_voidptr(L"TLS_GOSTR341001_WITH_28147_CNT_IMIT"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "TLS_CIPHER_2012_SUITE_NAME",SWIG_NewPointerObj(SWIG_as_voidptr(L"TLS_GOSTR341112_256_WITH_28147_CNT_IMIT"),SWIGTYPE_p_wchar_t, 0 ));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ALG_TYPE_CIPHER_SUITE",SWIG_From_int(static_cast< int >((15 << 9))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS_GOSTR341001_WITH_28147_CNT_IMIT",SWIG_From_int(static_cast< int >(((15 << 9)|0x0081))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CALG_TLS_GOSTR341112_256_WITH_28147_CNT_IMIT",SWIG_From_int(static_cast< int >(((15 << 9)|0xFF85))));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_RSA_PKCS",SWIG_From_int(static_cast< int >(0x00000050)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_RSA_X_509",SWIG_From_int(static_cast< int >(0x00000051)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_ALG_PARAM_OID_GROUP_ID",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_PROMIX_MODE",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_SIMPLEMIX_MODE",SWIG_From_int(static_cast< int >(0x00000000)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CRYPT_MIXDUPLICATE",SWIG_From_int(static_cast< int >(0x00000002)));
  
  /* type '::RCObj' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__RCObj_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'RCObj'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "RCObj", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "RCObj");
  d = md;
  
  /* type '::_CRYPTOAPI_BLOB' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___CRYPTOAPI_BLOB_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CRYPTOAPI_BLOB'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CRYPTOAPI_BLOB", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CRYPTOAPI_BLOB");
  d = md;
  
  /* type '::_CMS_DH_KEY_INFO' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___CMS_DH_KEY_INFO_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CMS_DH_KEY_INFO'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CMS_DH_KEY_INFO", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CMS_DH_KEY_INFO");
  d = md;
  
  /* type '::_CRYPT_BIT_BLOB' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___CRYPT_BIT_BLOB_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CRYPT_BIT_BLOB'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CRYPT_BIT_BLOB", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CRYPT_BIT_BLOB");
  d = md;
  
  /* type '::_CRYPT_ALGORITHM_IDENTIFIER' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___CRYPT_ALGORITHM_IDENTIFIER_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CRYPT_ALGORITHM_IDENTIFIER'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CRYPT_ALGORITHM_IDENTIFIER", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CRYPT_ALGORITHM_IDENTIFIER");
  d = md;
  
  /* type '::CryptDesc' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CryptDesc_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CryptDesc'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CryptDesc", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CryptDesc");
  d = md;
  
  /* type '::CryptIter' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CryptIter_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CryptIter'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CryptIter", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CryptIter");
  d = md;
  
  /* type '::Crypt' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Crypt_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_RCObj");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Crypt' as base 'RCObj' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Crypt'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Crypt", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Crypt");
  d = md;
  
  /* type '::Key' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Key_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_RCObj");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Key' as base 'RCObj' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Key'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Key", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Key");
  d = md;
  
  /* type '::Cert' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Cert_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_RCObj");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Cert' as base 'RCObj' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Cert'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Cert", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Cert");
  d = md;
  
  /* type '::CertIter' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CertIter_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertIter'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CertIter", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CertIter");
  d = md;
  
  /* type '::CertFind' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CertFind_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_CertIter");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertFind' as base 'CertIter' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertFind'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CertFind", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CertFind");
  d = md;
  
  /* type '::CertStore' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CertStore_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_RCObj");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertStore' as base 'RCObj' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertStore'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CertStore", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CertStore");
  d = md;
  
  /* type '::EKUIter' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__EKUIter_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'EKUIter'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "EKUIter", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "EKUIter");
  d = md;
  
  /* type '::CertInfo' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CertInfo_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_RCObj");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertInfo' as base 'RCObj' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertInfo'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CertInfo", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CertInfo");
  d = md;
  
  /* type '::ExtIter' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ExtIter_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ExtIter'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ExtIter", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ExtIter");
  d = md;
  
  /* type '::CryptMsg' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CryptMsg_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_RCObj");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CryptMsg' as base 'RCObj' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CryptMsg'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CryptMsg", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CryptMsg");
  d = md;
  
  /* type '::_CERT_INFO' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin___CERT_INFO_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CERT_INFO'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CERT_INFO", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CERT_INFO");
  d = md;
  
  /* type '::CertExtension' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CertExtension_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertExtension'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CertExtension", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CertExtension");
  d = md;
  
  /* type '::Signature' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Signature_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_CryptMsg");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Signature' as base 'CryptMsg' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Signature'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Signature", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Signature");
  d = md;
  
  /* type '::CertRequest' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__CertRequest_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CertRequest'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CertRequest", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CertRequest");
  d = md;
  
  /* type '::Hash' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Hash_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_RCObj");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Hash' as base 'RCObj' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Hash'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Hash", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Hash");
  d = md;
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

